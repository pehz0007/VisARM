/*
 * Decompiled with CFR 0.152.
 */
package visual;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.text.Segment;
import org.fife.ui.rsyntaxtextarea.Token;
import visual.ArgType;
import visual.Argument;
import visual.ArmV7TokenMaker;
import visual.DcdWord;
import visual.Emulator;
import visual.Instruction;
import visual.LineLabel;
import visual.RuntimeError;
import visual.Symbol;
import visual.SyntaxError;

public class SyntaxScanner {
    private static final String comma = "(\\s*,\\s*)";
    private static final String minus = "(\\s*-\\s*)";
    private static final String plus = "(\\s*\\+\\s*)";
    private static final String multiply = "(\\s*\\*\\s*)";
    private static final String exclamation = "(\\s*!\\s*)";
    private static final String possibleExclamation = "((\\s*!\\s*)?)";
    private static final String squareBraceStart = "(\\s*\\[\\s*)";
    private static final String squareBraceEnd = "(\\s*]\\s*)";
    private static final String curlyBraceStart = "(\\s*\\{\\s*)";
    private static final String curlyBraceEnd = "(\\s*\\}\\s*)";
    private static final String possibleComma = "((\\s*,\\s*)?)";
    private static final String space = "(\\s+)";
    private static final String allRegs = "(R(1[0-5]|[0-9])|LR|SP|PC)";
    private static final String allRegsSigned = "((\\+|-)?(R(1[0-5]|[0-9])|LR|SP|PC))";
    private static final String regsExceptPC = "(R(1[0-4]|[0-9])|LR|SP)";
    private static final String regsExceptSP = "(R(1[0-24-5]|[0-9])|LR|PC)";
    private static final String regsExceptPCAndSP = "(R(1[0-2]|14|[0-9])|LR)";
    private static final String label = "(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))";
    private static final String decLit = "([0-9]+)";
    private static final String hexLit32 = "(?i:(0x|&)[A-F0-9]{1,8})";
    private static final String binLit32 = "(?i:0b[0-1]{1,32})";
    private static final String asciiLit = "('(\\\\'|[ -&]|[(-~])')";
    private static final String value32 = "((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))";
    private static final String expression32 = "(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])')))";
    private static final String expression32list = "(((((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])')))(\\s*,\\s*))*(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))";
    private static final String pseudoImmediate32 = "(=(\\+|-)?(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))";
    private static final String expressionConstant = "(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))";
    private static final String regsExceptPCAndSPorFlexConstant = "((R(1[0-2]|14|[0-9])|LR)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])')))))";
    private static final String allOperands = "((R(1[0-5]|[0-9])|LR|SP|PC)|((#|=)?)(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])')))|((#|=)?)(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,})))";
    private static final String flexShiftLSL = "((\\s*,\\s*)LSL\\s+((R(1[0-4]|[0-9])|LR|SP)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))))";
    private static final String flexShiftLSR = "((\\s*,\\s*)LSR\\s+((R(1[0-4]|[0-9])|LR|SP)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))))";
    private static final String flexShiftASR = "((\\s*,\\s*)ASR\\s+((R(1[0-4]|[0-9])|LR|SP)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))))";
    private static final String flexShiftROR = "((\\s*,\\s*)ROR\\s+((R(1[0-4]|[0-9])|LR|SP)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))))";
    private static final String flexShiftRRX = "((\\s*,\\s*)RRX)";
    private static final String flexShiftAll = "(((\\s*,\\s*)LSL\\s+((R(1[0-4]|[0-9])|LR|SP)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))))|((\\s*,\\s*)LSR\\s+((R(1[0-4]|[0-9])|LR|SP)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))))|((\\s*,\\s*)ASR\\s+((R(1[0-4]|[0-9])|LR|SP)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))))|((\\s*,\\s*)ROR\\s+((R(1[0-4]|[0-9])|LR|SP)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))))|((\\s*,\\s*)RRX))";
    private static final String flexSecondOpAll = "(((R(1[0-5]|[0-9])|LR|SP|PC)(((\\s*,\\s*)LSL\\s+((R(1[0-4]|[0-9])|LR|SP)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))))|((\\s*,\\s*)LSR\\s+((R(1[0-4]|[0-9])|LR|SP)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))))|((\\s*,\\s*)ASR\\s+((R(1[0-4]|[0-9])|LR|SP)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))))|((\\s*,\\s*)ROR\\s+((R(1[0-4]|[0-9])|LR|SP)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))))|((\\s*,\\s*)RRX)))|(R(1[0-5]|[0-9])|LR|SP|PC)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])')))))";
    private static final String flexSecondOpExceptPCAndSP = "(((R(1[0-2]|14|[0-9])|LR)(((\\s*,\\s*)LSL\\s+((R(1[0-4]|[0-9])|LR|SP)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))))|((\\s*,\\s*)LSR\\s+((R(1[0-4]|[0-9])|LR|SP)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))))|((\\s*,\\s*)ASR\\s+((R(1[0-4]|[0-9])|LR|SP)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))))|((\\s*,\\s*)ROR\\s+((R(1[0-4]|[0-9])|LR|SP)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))))|((\\s*,\\s*)RRX)))|(R(1[0-2]|14|[0-9])|LR)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])')))))";
    private static final String conditionCodesAll = "(AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)";
    private static final String conditionCodes = "((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)";
    private static final String stackTypes = "((FD|FA|ED|EA|IB|IA|DB|DA)?)";
    private static final String setBit = "(S?)";
    private static final String startOfLine = "((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)";
    private static final String endOfLine = "(\\s+;.*|\\s*)";
    private static final String blankLine = "(\\s*;.*|\\s*)";
    private static final String programCounter = "(R15|PC)";
    private static final String stackPointer = "(R13|SP)";
    private static final String spOrPc = "((R15|PC)|(R13|SP))";
    private static final String optionalImmediateOffset = "(((\\s*,\\s*)(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])')))))?)";
    private static final String optionalImmediateShift = "((((\\s*,\\s*)LSL\\s+((R(1[0-4]|[0-9])|LR|SP)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))))|((\\s*,\\s*)LSR\\s+((R(1[0-4]|[0-9])|LR|SP)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))))|((\\s*,\\s*)ASR\\s+((R(1[0-4]|[0-9])|LR|SP)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))))|((\\s*,\\s*)ROR\\s+((R(1[0-4]|[0-9])|LR|SP)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))))|((\\s*,\\s*)RRX))?)";
    private static final String regListLdm = "(((((R(1[0-24-5]|[0-9])|LR|PC)(\\s*-\\s*)(R(1[0-24-5]|[0-9])|LR|PC)(\\s*,\\s*))+(((R(1[0-24-5]|[0-9])|LR|PC)(\\s*-\\s*)(R(1[0-24-5]|[0-9])|LR|PC))|(R(1[0-24-5]|[0-9])|LR|PC)))|(((R(1[0-24-5]|[0-9])|LR|PC)(\\s*,\\s*))+(((R(1[0-24-5]|[0-9])|LR|PC)(\\s*-\\s*)(R(1[0-24-5]|[0-9])|LR|PC))|(R(1[0-24-5]|[0-9])|LR|PC)))|((R(1[0-24-5]|[0-9])|LR|PC)(\\s*-\\s*)(R(1[0-24-5]|[0-9])|LR|PC))|((R(1[0-24-5]|[0-9])|LR|PC)))(((\\s*,\\s*)((R(1[0-24-5]|[0-9])|LR|PC)(\\s*-\\s*)(R(1[0-24-5]|[0-9])|LR|PC))|(\\s*,\\s*)((R(1[0-24-5]|[0-9])|LR|PC)))*))";
    private static final String regListStm = "(((((R(1[0-2]|14|[0-9])|LR)(\\s*-\\s*)(R(1[0-2]|14|[0-9])|LR)(\\s*,\\s*))+(((R(1[0-2]|14|[0-9])|LR)(\\s*-\\s*)(R(1[0-2]|14|[0-9])|LR))|(R(1[0-2]|14|[0-9])|LR)))|(((R(1[0-2]|14|[0-9])|LR)(\\s*,\\s*))+(((R(1[0-2]|14|[0-9])|LR)(\\s*-\\s*)(R(1[0-2]|14|[0-9])|LR))|(R(1[0-2]|14|[0-9])|LR)))|((R(1[0-2]|14|[0-9])|LR)(\\s*-\\s*)(R(1[0-2]|14|[0-9])|LR))|((R(1[0-2]|14|[0-9])|LR)))(((\\s*,\\s*)((R(1[0-2]|14|[0-9])|LR)(\\s*-\\s*)(R(1[0-2]|14|[0-9])|LR))|(\\s*,\\s*)((R(1[0-2]|14|[0-9])|LR)))*))";
    private static final String regListAll = "(?i:((((R(1[0-5]|[0-9])|LR|SP|PC)(\\s*-\\s*)(R(1[0-5]|[0-9])|LR|SP|PC)(\\s*,\\s*))+(((R(1[0-5]|[0-9])|LR|SP|PC)(\\s*-\\s*)(R(1[0-5]|[0-9])|LR|SP|PC))|(R(1[0-5]|[0-9])|LR|SP|PC)))|(((R(1[0-5]|[0-9])|LR|SP|PC)(\\s*,\\s*))+(((R(1[0-5]|[0-9])|LR|SP|PC)(\\s*-\\s*)(R(1[0-5]|[0-9])|LR|SP|PC))|(R(1[0-5]|[0-9])|LR|SP|PC)))|((R(1[0-5]|[0-9])|LR|SP|PC)(\\s*-\\s*)(R(1[0-5]|[0-9])|LR|SP|PC))|((R(1[0-5]|[0-9])|LR|SP|PC)))(((\\s*,\\s*)((R(1[0-5]|[0-9])|LR|SP|PC)(\\s*-\\s*)(R(1[0-5]|[0-9])|LR|SP|PC))|(\\s*,\\s*)((R(1[0-5]|[0-9])|LR|SP|PC)))*))";
    private static final String move = "(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(MOV|MVN)(S?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)(R(1[0-5]|[0-9])|LR|SP|PC)(\\s*,\\s*)(((R(1[0-5]|[0-9])|LR|SP|PC)(((\\s*,\\s*)LSL\\s+((R(1[0-4]|[0-9])|LR|SP)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))))|((\\s*,\\s*)LSR\\s+((R(1[0-4]|[0-9])|LR|SP)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))))|((\\s*,\\s*)ASR\\s+((R(1[0-4]|[0-9])|LR|SP)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))))|((\\s*,\\s*)ROR\\s+((R(1[0-4]|[0-9])|LR|SP)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))))|((\\s*,\\s*)RRX)))|(R(1[0-5]|[0-9])|LR|SP|PC)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])')))))(\\s+;.*|\\s*))";
    private static final String add = "(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(ADD)(S?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)(R(1[0-5]|[0-9])|LR|SP|PC)(\\s*,\\s*)(R(1[0-5]|[0-9])|LR|SP|PC)(\\s*,\\s*)(((R(1[0-2]|14|[0-9])|LR)(((\\s*,\\s*)LSL\\s+((R(1[0-4]|[0-9])|LR|SP)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))))|((\\s*,\\s*)LSR\\s+((R(1[0-4]|[0-9])|LR|SP)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))))|((\\s*,\\s*)ASR\\s+((R(1[0-4]|[0-9])|LR|SP)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))))|((\\s*,\\s*)ROR\\s+((R(1[0-4]|[0-9])|LR|SP)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))))|((\\s*,\\s*)RRX)))|(R(1[0-2]|14|[0-9])|LR)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])')))))(\\s+;.*|\\s*))";
    private static final String sub = "(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(SUB)(S?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)(R(1[0-5]|[0-9])|LR|SP|PC)(\\s*,\\s*)(R(1[0-5]|[0-9])|LR|SP|PC)(\\s*,\\s*)(((R(1[0-2]|14|[0-9])|LR)(((\\s*,\\s*)LSL\\s+((R(1[0-4]|[0-9])|LR|SP)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))))|((\\s*,\\s*)LSR\\s+((R(1[0-4]|[0-9])|LR|SP)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))))|((\\s*,\\s*)ASR\\s+((R(1[0-4]|[0-9])|LR|SP)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))))|((\\s*,\\s*)ROR\\s+((R(1[0-4]|[0-9])|LR|SP)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))))|((\\s*,\\s*)RRX)))|(R(1[0-2]|14|[0-9])|LR)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])')))))(\\s+;.*|\\s*))";
    private static final String otherAddSub = "(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(ADC|SBC|RSB|RSC)(S?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)(R(1[0-2]|14|[0-9])|LR)(\\s*,\\s*)(R(1[0-2]|14|[0-9])|LR)(\\s*,\\s*)(((R(1[0-2]|14|[0-9])|LR)(((\\s*,\\s*)LSL\\s+((R(1[0-4]|[0-9])|LR|SP)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))))|((\\s*,\\s*)LSR\\s+((R(1[0-4]|[0-9])|LR|SP)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))))|((\\s*,\\s*)ASR\\s+((R(1[0-4]|[0-9])|LR|SP)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))))|((\\s*,\\s*)ROR\\s+((R(1[0-4]|[0-9])|LR|SP)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))))|((\\s*,\\s*)RRX)))|(R(1[0-2]|14|[0-9])|LR)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])')))))(\\s+;.*|\\s*))";
    private static final String logical = "(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(AND|EOR|BIC|ORR|ORN)(S?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)(R(1[0-2]|14|[0-9])|LR)(\\s*,\\s*)(R(1[0-2]|14|[0-9])|LR)(\\s*,\\s*)(((R(1[0-2]|14|[0-9])|LR)(((\\s*,\\s*)LSL\\s+((R(1[0-4]|[0-9])|LR|SP)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))))|((\\s*,\\s*)LSR\\s+((R(1[0-4]|[0-9])|LR|SP)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))))|((\\s*,\\s*)ASR\\s+((R(1[0-4]|[0-9])|LR|SP)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))))|((\\s*,\\s*)ROR\\s+((R(1[0-4]|[0-9])|LR|SP)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))))|((\\s*,\\s*)RRX)))|(R(1[0-2]|14|[0-9])|LR)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])')))))(\\s+;.*|\\s*))";
    private static final String rrx = "(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(RRX)(S?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)(R(1[0-24-5]|[0-9])|LR|PC)(\\s*,\\s*)(R(1[0-24-5]|[0-9])|LR|PC)(\\s+;.*|\\s*))";
    private static final String otherShift = "(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(LSL|LSR|ASR|ROR)(S?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)(R(1[0-2]|14|[0-9])|LR)(\\s*,\\s*)(R(1[0-2]|14|[0-9])|LR)(\\s*,\\s*)((R(1[0-2]|14|[0-9])|LR)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])')))))(\\s+;.*|\\s*))";
    private static final String compare = "(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(CMP|CMN)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)(R(1[0-4]|[0-9])|LR|SP)(\\s*,\\s*)(((R(1[0-2]|14|[0-9])|LR)(((\\s*,\\s*)LSL\\s+((R(1[0-4]|[0-9])|LR|SP)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))))|((\\s*,\\s*)LSR\\s+((R(1[0-4]|[0-9])|LR|SP)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))))|((\\s*,\\s*)ASR\\s+((R(1[0-4]|[0-9])|LR|SP)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))))|((\\s*,\\s*)ROR\\s+((R(1[0-4]|[0-9])|LR|SP)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))))|((\\s*,\\s*)RRX)))|(R(1[0-2]|14|[0-9])|LR)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])')))))(\\s+;.*|\\s*))";
    private static final String test = "(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(TST|TEQ)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)(R(1[0-4]|[0-9])|LR|SP)(\\s*,\\s*)(((R(1[0-2]|14|[0-9])|LR)(((\\s*,\\s*)LSL\\s+((R(1[0-4]|[0-9])|LR|SP)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))))|((\\s*,\\s*)LSR\\s+((R(1[0-4]|[0-9])|LR|SP)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))))|((\\s*,\\s*)ASR\\s+((R(1[0-4]|[0-9])|LR|SP)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))))|((\\s*,\\s*)ROR\\s+((R(1[0-4]|[0-9])|LR|SP)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))))|((\\s*,\\s*)RRX)))|(R(1[0-2]|14|[0-9])|LR)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])')))))(\\s+;.*|\\s*))";
    private static final String branch = "(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(BL|B)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])')))(\\s+;.*|\\s*))";
    private static final String adr = "(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(ADR)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)(R(1[0-5]|[0-9])|LR|SP|PC)(\\s*,\\s*)(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])')))(\\s+;.*|\\s*))";
    private static final String ldrPseudo = "(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(LDR)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)(R(1[0-5]|[0-9])|LR|SP|PC)(\\s*,\\s*)(=(\\+|-)?(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))(\\s+;.*|\\s*))";
    private static final String ldrImmediateOffset = "(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(LDR)(B?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)(R(1[0-5]|[0-9])|LR|SP|PC)(\\s*,\\s*)(\\s*\\[\\s*)(R(1[0-5]|[0-9])|LR|SP|PC)(((\\s*,\\s*)(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])')))))?)(\\s*]\\s*)(\\s+;.*|\\s*))";
    private static final String ldrImmediatePreIndexed = "(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(LDR)(B?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)(R(1[0-5]|[0-9])|LR|SP|PC)(\\s*,\\s*)(\\s*\\[\\s*)(R(1[0-5]|[0-9])|LR|SP|PC)(\\s*,\\s*)(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))(\\s*]\\s*)(\\s*!\\s*)(\\s+;.*|\\s*))";
    private static final String ldrImmediatePostIndexed = "(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(LDR)(B?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)(R(1[0-5]|[0-9])|LR|SP|PC)(\\s*,\\s*)(\\s*\\[\\s*)(R(1[0-5]|[0-9])|LR|SP|PC)(\\s*]\\s*)(\\s*,\\s*)(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))(\\s+;.*|\\s*))";
    private static final String ldrRegisterOffset = "(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(LDR)(B?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)(R(1[0-5]|[0-9])|LR|SP|PC)(\\s*,\\s*)(\\s*\\[\\s*)(R(1[0-5]|[0-9])|LR|SP|PC)(\\s*,\\s*)((\\+|-)?(R(1[0-5]|[0-9])|LR|SP|PC))((((\\s*,\\s*)LSL\\s+((R(1[0-4]|[0-9])|LR|SP)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))))|((\\s*,\\s*)LSR\\s+((R(1[0-4]|[0-9])|LR|SP)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))))|((\\s*,\\s*)ASR\\s+((R(1[0-4]|[0-9])|LR|SP)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))))|((\\s*,\\s*)ROR\\s+((R(1[0-4]|[0-9])|LR|SP)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))))|((\\s*,\\s*)RRX))?)(\\s*]\\s*)(\\s+;.*|\\s*))";
    private static final String ldrRegisterPreIndexed = "(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(LDR)(B?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)(R(1[0-5]|[0-9])|LR|SP|PC)(\\s*,\\s*)(\\s*\\[\\s*)(R(1[0-5]|[0-9])|LR|SP|PC)(\\s*,\\s*)((\\+|-)?(R(1[0-5]|[0-9])|LR|SP|PC))((((\\s*,\\s*)LSL\\s+((R(1[0-4]|[0-9])|LR|SP)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))))|((\\s*,\\s*)LSR\\s+((R(1[0-4]|[0-9])|LR|SP)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))))|((\\s*,\\s*)ASR\\s+((R(1[0-4]|[0-9])|LR|SP)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))))|((\\s*,\\s*)ROR\\s+((R(1[0-4]|[0-9])|LR|SP)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))))|((\\s*,\\s*)RRX))?)(\\s*]\\s*)(\\s*!\\s*)(\\s+;.*|\\s*))";
    private static final String ldrRegisterPostIndexed = "(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(LDR)(B?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)(R(1[0-5]|[0-9])|LR|SP|PC)(\\s*,\\s*)(\\s*\\[\\s*)(R(1[0-5]|[0-9])|LR|SP|PC)(\\s*]\\s*)(\\s*,\\s*)((\\+|-)?(R(1[0-5]|[0-9])|LR|SP|PC))((((\\s*,\\s*)LSL\\s+((R(1[0-4]|[0-9])|LR|SP)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))))|((\\s*,\\s*)LSR\\s+((R(1[0-4]|[0-9])|LR|SP)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))))|((\\s*,\\s*)ASR\\s+((R(1[0-4]|[0-9])|LR|SP)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))))|((\\s*,\\s*)ROR\\s+((R(1[0-4]|[0-9])|LR|SP)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))))|((\\s*,\\s*)RRX))?)(\\s+;.*|\\s*))";
    private static final String strImmediateOffset = "(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(STR)(B?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)(R(1[0-5]|[0-9])|LR|SP|PC)(\\s*,\\s*)(\\s*\\[\\s*)(R(1[0-5]|[0-9])|LR|SP|PC)(((\\s*,\\s*)(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])')))))?)(\\s*]\\s*)(\\s+;.*|\\s*))";
    private static final String strImmediatePreIndexed = "(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(STR)(B?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)(R(1[0-5]|[0-9])|LR|SP|PC)(\\s*,\\s*)(\\s*\\[\\s*)(R(1[0-5]|[0-9])|LR|SP|PC)(\\s*,\\s*)(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))(\\s*]\\s*)(\\s*!\\s*)(\\s+;.*|\\s*))";
    private static final String strImmediatePostIndexed = "(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(STR)(B?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)(R(1[0-5]|[0-9])|LR|SP|PC)(\\s*,\\s*)(\\s*\\[\\s*)(R(1[0-5]|[0-9])|LR|SP|PC)(\\s*]\\s*)(\\s*,\\s*)(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))(\\s+;.*|\\s*))";
    private static final String strRegisterOffset = "(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(STR)(B?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)(R(1[0-5]|[0-9])|LR|SP|PC)(\\s*,\\s*)(\\s*\\[\\s*)(R(1[0-5]|[0-9])|LR|SP|PC)(\\s*,\\s*)((\\+|-)?(R(1[0-5]|[0-9])|LR|SP|PC))((((\\s*,\\s*)LSL\\s+((R(1[0-4]|[0-9])|LR|SP)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))))|((\\s*,\\s*)LSR\\s+((R(1[0-4]|[0-9])|LR|SP)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))))|((\\s*,\\s*)ASR\\s+((R(1[0-4]|[0-9])|LR|SP)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))))|((\\s*,\\s*)ROR\\s+((R(1[0-4]|[0-9])|LR|SP)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))))|((\\s*,\\s*)RRX))?)(\\s*]\\s*)(\\s+;.*|\\s*))";
    private static final String strRegisterPreIndexed = "(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(STR)(B?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)(R(1[0-5]|[0-9])|LR|SP|PC)(\\s*,\\s*)(\\s*\\[\\s*)(R(1[0-5]|[0-9])|LR|SP|PC)(\\s*,\\s*)((\\+|-)?(R(1[0-5]|[0-9])|LR|SP|PC))((((\\s*,\\s*)LSL\\s+((R(1[0-4]|[0-9])|LR|SP)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))))|((\\s*,\\s*)LSR\\s+((R(1[0-4]|[0-9])|LR|SP)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))))|((\\s*,\\s*)ASR\\s+((R(1[0-4]|[0-9])|LR|SP)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))))|((\\s*,\\s*)ROR\\s+((R(1[0-4]|[0-9])|LR|SP)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))))|((\\s*,\\s*)RRX))?)(\\s*]\\s*)(\\s*!\\s*)(\\s+;.*|\\s*))";
    private static final String strRegisterPostIndexed = "(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(STR)(B?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)(R(1[0-5]|[0-9])|LR|SP|PC)(\\s*,\\s*)(\\s*\\[\\s*)(R(1[0-5]|[0-9])|LR|SP|PC)(\\s*]\\s*)(\\s*,\\s*)((\\+|-)?(R(1[0-5]|[0-9])|LR|SP|PC))((((\\s*,\\s*)LSL\\s+((R(1[0-4]|[0-9])|LR|SP)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))))|((\\s*,\\s*)LSR\\s+((R(1[0-4]|[0-9])|LR|SP)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))))|((\\s*,\\s*)ASR\\s+((R(1[0-4]|[0-9])|LR|SP)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))))|((\\s*,\\s*)ROR\\s+((R(1[0-4]|[0-9])|LR|SP)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))))|((\\s*,\\s*)RRX))?)(\\s+;.*|\\s*))";
    private static final String ldm = "(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(LDM)((FD|FA|ED|EA|IB|IA|DB|DA)?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)(R(1[0-4]|[0-9])|LR|SP)((\\s*!\\s*)?)(\\s*,\\s*)(\\s*\\{\\s*)(((((R(1[0-24-5]|[0-9])|LR|PC)(\\s*-\\s*)(R(1[0-24-5]|[0-9])|LR|PC)(\\s*,\\s*))+(((R(1[0-24-5]|[0-9])|LR|PC)(\\s*-\\s*)(R(1[0-24-5]|[0-9])|LR|PC))|(R(1[0-24-5]|[0-9])|LR|PC)))|(((R(1[0-24-5]|[0-9])|LR|PC)(\\s*,\\s*))+(((R(1[0-24-5]|[0-9])|LR|PC)(\\s*-\\s*)(R(1[0-24-5]|[0-9])|LR|PC))|(R(1[0-24-5]|[0-9])|LR|PC)))|((R(1[0-24-5]|[0-9])|LR|PC)(\\s*-\\s*)(R(1[0-24-5]|[0-9])|LR|PC))|((R(1[0-24-5]|[0-9])|LR|PC)))(((\\s*,\\s*)((R(1[0-24-5]|[0-9])|LR|PC)(\\s*-\\s*)(R(1[0-24-5]|[0-9])|LR|PC))|(\\s*,\\s*)((R(1[0-24-5]|[0-9])|LR|PC)))*))(\\s*\\}\\s*)(\\s+;.*|\\s*))";
    private static final String stm = "(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(STM)((FD|FA|ED|EA|IB|IA|DB|DA)?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)(R(1[0-4]|[0-9])|LR|SP)((\\s*!\\s*)?)(\\s*,\\s*)(\\s*\\{\\s*)(((((R(1[0-2]|14|[0-9])|LR)(\\s*-\\s*)(R(1[0-2]|14|[0-9])|LR)(\\s*,\\s*))+(((R(1[0-2]|14|[0-9])|LR)(\\s*-\\s*)(R(1[0-2]|14|[0-9])|LR))|(R(1[0-2]|14|[0-9])|LR)))|(((R(1[0-2]|14|[0-9])|LR)(\\s*,\\s*))+(((R(1[0-2]|14|[0-9])|LR)(\\s*-\\s*)(R(1[0-2]|14|[0-9])|LR))|(R(1[0-2]|14|[0-9])|LR)))|((R(1[0-2]|14|[0-9])|LR)(\\s*-\\s*)(R(1[0-2]|14|[0-9])|LR))|((R(1[0-2]|14|[0-9])|LR)))(((\\s*,\\s*)((R(1[0-2]|14|[0-9])|LR)(\\s*-\\s*)(R(1[0-2]|14|[0-9])|LR))|(\\s*,\\s*)((R(1[0-2]|14|[0-9])|LR)))*))(\\s*\\}\\s*)(\\s+;.*|\\s*))";
    private static final String dcd = "(?i:\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))\\s+(DCD)(\\s+)(((((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])')))(\\s*,\\s*))*(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))(\\s+;.*|\\s*))";
    private static final String dcb = "(?i:\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))\\s+(DCB)(\\s+)(((((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])')))(\\s*,\\s*))*(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))(\\s+;.*|\\s*))";
    private static final String equ = "(?i:\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))\\s+(EQU)(\\s+)(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])')))(\\s+;.*|\\s*))";
    private static final String fill = "(?i:\\s*((?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))\\s)?\\s*(FILL)(\\s+)(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])')))(\\s+;.*|\\s*))";
    private static final String endOfFile = "(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(END)(\\s+;.*|\\s*))";
    private static final String labelOnly = "(?i:\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))(\\s+;.*|\\s*))";
    private static int maxLabelLength = 0;
    private static int codeAddress = 0;

    private static SyntaxError scanForErrors(int lineNumber, String line, Emulator emulator, List<Instruction> instructions, List<Symbol> symbols, List<DcdWord> dcdWords, List<LineLabel> lineLabels, boolean deferSceneUpdates) {
        DcdWord w;
        String label;
        ArrayList<Integer> values;
        String[] expressions;
        boolean found;
        String expressionSubString;
        boolean hasEndSquare;
        boolean hasEndSquare2;
        boolean hasError;
        String message = "";
        String details = "";
        boolean matched = false;
        if (line.isEmpty() || line.matches(blankLine)) {
            return new SyntaxError(lineNumber, message, details);
        }
        boolean bl = hasError = !line.matches(move);
        if (hasError) {
            if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(MOV|MVN)(S?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)(R(1[0-5]|[0-9])|LR|SP|PC)((\\s*,\\s*)?)(\\s+;.*|\\s*))")) {
                matched = true;
                message = "Missing source.";
                details = "MOV or MVN instructions require a source and destination. Press Ctrl+Space for more information.";
            } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(MOV|MVN)(S?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+;.*|\\s*))")) {
                matched = true;
                message = "Missing source and destination.";
                details = "MOV or MVN instructions require a source and destination. Press Ctrl+Space for more information.";
            } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(MOV|MVN)(S?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)((R(1[0-5]|[0-9])|LR|SP|PC)|((#|=)?)(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])')))|((#|=)?)(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))).*)")) {
                matched = true;
                message = "Invalid source.";
                details = "MOV or MVN instruction source must be a register, a register with a shift, or an immediate. Press Ctrl+Space for more information.";
            }
        } else {
            matched = true;
            if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(MOV|MVN)S((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)((R15|PC)|(R13|SP))((\\s*,\\s*)?).*)") || line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(MOV|MVN)S((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)(R(1[0-5]|[0-9])|LR|SP|PC)(\\s*,\\s*)((R15|PC)|(R13|SP))(\\s+;.*|\\s*))")) {
                hasError = true;
                message = "Invalid set bit specification.";
                details = "Cannot use set bit with R13 (SP) or R15 (PC) with MOV or MVN instructions.";
            } else {
                try {
                    instructions.add(SyntaxScanner.createInstructionForLine("", lineNumber, line, false, false));
                }
                catch (RuntimeError e) {
                    hasError = true;
                    message = e.getMessage();
                    details = e.getDetails();
                }
            }
        }
        if (!matched) {
            boolean bl2 = hasError = !line.matches(add);
            if (hasError) {
                if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(ADD)(S?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+;.*|\\s*))")) {
                    matched = true;
                    message = "Missing destination and all operands.";
                    details = "ADD instructions require a destination and two operands. Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(ADD)(S?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)((R(1[0-5]|[0-9])|LR|SP|PC)|((#|=)?)(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])')))|((#|=)?)(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,})))((\\s*,\\s*)?)(\\s+;.*|\\s*))")) {
                    matched = true;
                    message = "Missing all operands.";
                    details = "ADD instructions require a destination and two operands. Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(ADD)(S?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)((R(1[0-5]|[0-9])|LR|SP|PC)|((#|=)?)(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])')))|((#|=)?)(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,})))(\\s*,\\s*)((R(1[0-5]|[0-9])|LR|SP|PC)|((#|=)?)(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])')))|((#|=)?)(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,})))((\\s*,\\s*)?)(\\s+;.*|\\s*))")) {
                    matched = true;
                    message = "Missing second operand.";
                    details = "ADD instructions require a destination and two operands. Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(ADD)(S?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)((R(1[0-5]|[0-9])|LR|SP|PC)|((#|=)?)(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])')))|((#|=)?)(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,})))(\\s*,\\s*)((R(1[0-5]|[0-9])|LR|SP|PC)|((#|=)?)(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])')))|((#|=)?)(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,})))(\\s*,\\s*)((R15|PC)|(R13|SP))(\\s+;.*|\\s*))")) {
                    matched = true;
                    message = "Invalid second operand.";
                    details = "ADD instruction second operand cannot be R13 (SP) or R15 (PC). Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(ADD)(S?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)((R(1[0-5]|[0-9])|LR|SP|PC)|((#|=)?)(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])')))|((#|=)?)(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,})))(\\s*,\\s*)((R(1[0-5]|[0-9])|LR|SP|PC)|((#|=)?)(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])')))|((#|=)?)(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))).*)")) {
                    matched = true;
                    message = "Invalid first operand.";
                    details = "ADD instruction first operand cannot be an immediate or label. Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(ADD)(S?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)((R(1[0-5]|[0-9])|LR|SP|PC)|((#|=)?)(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])')))|((#|=)?)(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))).*)")) {
                    matched = true;
                    message = "Invalid destination.";
                    details = "ADD instruction destination cannot be an immediate or label. Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(ADD)(S?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+).*)")) {
                    matched = true;
                    message = "Invalid instruction format for ADD instruction.";
                    details = "Press Ctrl+Space for more information.";
                }
            } else {
                matched = true;
                if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(ADD)(S?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)(R15|PC).*)") && line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(ADD)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)(R15|PC)(\\s*,\\s*)(R13|SP)(\\s*,\\s*)(R13|SP)(\\s+;.*|\\s*))")) {
                    hasError = true;
                    message = "Restrictions for R15 (PC) as destination not met.";
                    details = "Destination can be R15 (PC) under specific restrictions only. Press Ctrl+Space for more information.";
                }
                if (!hasError && line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(ADD)(S?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)(R(1[0-5]|[0-9])|LR|SP|PC)(\\s*,\\s*)(R15|PC).*)") && (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(ADD)(S?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)(R13|SP).*)") || line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(ADD)(S?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)(R(1[0-5]|[0-9])|LR|SP|PC)(\\s*,\\s*)(R15|PC)(R13|SP)(\\s+;.*|\\s*))"))) {
                    hasError = true;
                    message = "Restrictions for R15 (PC) as first operand not met.";
                    details = "Second operand can be R15 (PC) under specific restrictions only. Press Ctrl+Space for more information.";
                }
                if (!hasError && line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(ADD)(S?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)(R13|SP).*)")) {
                    if (!line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(ADD)(S?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)(R13|SP)(\\s*,\\s*)(R13|SP).*)")) {
                        hasError = true;
                        message = "Restrictions for R13 (SP) as destination not met.";
                        details = "Destination can be R13 (SP) under specific restrictions only. Press Ctrl+Space for more information.";
                    } else if (line.matches("(?i:.*(((\\s*,\\s*)LSL\\s+((R(1[0-4]|[0-9])|LR|SP)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))))|((\\s*,\\s*)LSR\\s+((R(1[0-4]|[0-9])|LR|SP)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))))|((\\s*,\\s*)ASR\\s+((R(1[0-4]|[0-9])|LR|SP)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))))|((\\s*,\\s*)ROR\\s+((R(1[0-4]|[0-9])|LR|SP)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))))|((\\s*,\\s*)RRX)).*)")) {
                        if (!line.matches("(?i:.*((\\s*,\\s*)LSL\\s+((R(1[0-4]|[0-9])|LR|SP)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])')))))).*)")) {
                            hasError = true;
                            message = "Restrictions for R13 (SP) as destination not met.";
                            details = "Destination can be R13 (SP) under specific restrictions only. Press Ctrl+Space for more information.";
                        } else if (SyntaxScanner.getImmediateForLine(line) < 0 || SyntaxScanner.getImmediateForLine(line) > 3) {
                            hasError = true;
                            message = "Restrictions for R13 (SP) as destination not met.";
                            details = "Destination can be R13 (SP) under specific restrictions only. Press Ctrl+Space for more information.";
                        }
                    }
                }
                if (!hasError) {
                    try {
                        instructions.add(SyntaxScanner.createInstructionForLine("", lineNumber, line, false, false));
                    }
                    catch (RuntimeError e) {
                        hasError = true;
                        message = e.getMessage();
                        details = e.getDetails();
                    }
                }
            }
        }
        if (!matched) {
            boolean bl3 = hasError = !line.matches(sub);
            if (hasError) {
                if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(SUB)(S?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+;.*|\\s*))")) {
                    matched = true;
                    message = "Missing destination and all operands.";
                    details = "SUB instructions require a destination and two operands. Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(SUB)(S?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)((R(1[0-5]|[0-9])|LR|SP|PC)|((#|=)?)(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])')))|((#|=)?)(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,})))((\\s*,\\s*)?)(\\s+;.*|\\s*))")) {
                    matched = true;
                    message = "Missing all operands.";
                    details = "SUB instructions require a destination and two operands. Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(SUB)(S?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)((R(1[0-5]|[0-9])|LR|SP|PC)|((#|=)?)(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])')))|((#|=)?)(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,})))(\\s*,\\s*)((R(1[0-5]|[0-9])|LR|SP|PC)|((#|=)?)(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])')))|((#|=)?)(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,})))((\\s*,\\s*)?)(\\s+;.*|\\s*))")) {
                    matched = true;
                    message = "Missing second operand.";
                    details = "SUB instructions require a destination and two operands. Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(SUB)(S?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)((R(1[0-5]|[0-9])|LR|SP|PC)|((#|=)?)(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])')))|((#|=)?)(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,})))(\\s*,\\s*)((R(1[0-5]|[0-9])|LR|SP|PC)|((#|=)?)(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])')))|((#|=)?)(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,})))(\\s*,\\s*)((R15|PC)|(R13|SP))(\\s+;.*|\\s*))")) {
                    matched = true;
                    message = "Invalid second operand.";
                    details = "SUB instruction second operand cannot be R13 (SP) or R15 (PC). Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(SUB)(S?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)((R(1[0-5]|[0-9])|LR|SP|PC)|((#|=)?)(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])')))|((#|=)?)(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,})))(\\s*,\\s*)((R(1[0-5]|[0-9])|LR|SP|PC)|((#|=)?)(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])')))|((#|=)?)(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))).*)")) {
                    matched = true;
                    message = "Invalid first operand.";
                    details = "SUB instruction first operand cannot be an immediate, R15 (PC) or label. Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(SUB)(S?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)((R(1[0-5]|[0-9])|LR|SP|PC)|((#|=)?)(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])')))|((#|=)?)(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))).*)")) {
                    matched = true;
                    message = "Invalid destination.";
                    details = "SUB instruction destination cannot be an immediate, label or R15 (PC). Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(SUB)(S?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+).*)")) {
                    matched = true;
                    message = "Invalid instruction format for SUB instruction.";
                    details = "Press Ctrl+Space for more information.";
                }
            } else {
                matched = true;
                if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(SUB)(S?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)(R13|SP).*)")) {
                    if (!line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(SUB)(S?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)(R13|SP)(\\s*,\\s*)(R13|SP).*)")) {
                        hasError = true;
                        message = "Restrictions for R13 (SP) as destination not met.";
                        details = "Destination can be R13 (SP) under specific restrictions only. Press Ctrl+Space for more information.";
                    } else if (line.matches("(?i:.*(((\\s*,\\s*)LSL\\s+((R(1[0-4]|[0-9])|LR|SP)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))))|((\\s*,\\s*)LSR\\s+((R(1[0-4]|[0-9])|LR|SP)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))))|((\\s*,\\s*)ASR\\s+((R(1[0-4]|[0-9])|LR|SP)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))))|((\\s*,\\s*)ROR\\s+((R(1[0-4]|[0-9])|LR|SP)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))))|((\\s*,\\s*)RRX)).*)")) {
                        if (!line.matches("(?i:.*((\\s*,\\s*)LSL\\s+((R(1[0-4]|[0-9])|LR|SP)|(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])')))))).*)")) {
                            hasError = true;
                            message = "Restrictions for R13 (SP) as destination not met.";
                            details = "Destination can be R13 (SP) under specific restrictions only. Press Ctrl+Space for more information.";
                        } else if (SyntaxScanner.getImmediateForLine(line) < 0 || SyntaxScanner.getImmediateForLine(line) > 3) {
                            hasError = true;
                            message = "Restrictions for R13 (SP) as destination not met.";
                            details = "Destination can be R13 (SP) under specific restrictions only. Press Ctrl+Space for more information.";
                        }
                    }
                }
                if (!hasError && line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(SUB)(S?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)(R(1[0-5]|[0-9])|LR|SP|PC)(\\s*,\\s*)(R15|PC).*)") && !line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(SUB)(S?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)(R(1[0-5]|[0-9])|LR|SP|PC)(\\s*,\\s*)(R15|PC)(\\s*,\\s*)(#(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])')))))")) {
                    hasError = true;
                    message = "Restrictions for R15 (PC) as first operand not met.";
                    details = "First operand can be R15 (PC) under specific restrictions only. Press Ctrl+Space for more information.";
                }
                if (!hasError) {
                    try {
                        instructions.add(SyntaxScanner.createInstructionForLine("", lineNumber, line, false, false));
                    }
                    catch (RuntimeError e) {
                        hasError = true;
                        message = e.getMessage();
                        details = e.getDetails();
                    }
                }
            }
        }
        if (!matched) {
            boolean bl4 = hasError = !line.matches(otherAddSub);
            if (hasError) {
                if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(ADC|RSB|RSC|SBC)(S?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+;.*|\\s*))")) {
                    matched = true;
                    message = "Missing destination and all operands.";
                    details = "ADC, RSB & RSC instructions require a destination and two operands. Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(ADC|RSB|RSC|SBC)(S?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)((R(1[0-5]|[0-9])|LR|SP|PC)|((#|=)?)(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])')))|((#|=)?)(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,})))((\\s*,\\s*)?)(\\s+;.*|\\s*))")) {
                    matched = true;
                    message = "Missing all operands.";
                    details = "ADC, RSB & RSC instructions require a destination and two operands. Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(ADC|RSB|RSC|SBC)(S?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)((R(1[0-5]|[0-9])|LR|SP|PC)|((#|=)?)(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])')))|((#|=)?)(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,})))(\\s*,\\s*)((R(1[0-5]|[0-9])|LR|SP|PC)|((#|=)?)(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])')))|((#|=)?)(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,})))((\\s*,\\s*)?)(\\s+;.*|\\s*))")) {
                    matched = true;
                    message = "Missing second operand.";
                    details = "ADC, RSB & RSC instructions require a destination and two operands. Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(ADC|RSB|RSC|SBC)(S?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)(R(1[0-2]|14|[0-9])|LR)(\\s*,\\s*)(R(1[0-2]|14|[0-9])|LR)(\\s*,\\s*)((R15|PC)|(R13|SP))(\\s+;.*|\\s*))")) {
                    matched = true;
                    message = "Invalid second operand.";
                    details = "ADC, RSB or RSC instruction second operand cannot be R13 (SP) or R15 (PC). Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(ADC|RSB|RSC|SBC)(S?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)(R(1[0-2]|14|[0-9])|LR)(\\s*,\\s*)((R(1[0-5]|[0-9])|LR|SP|PC)|((#|=)?)(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])')))|((#|=)?)(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))).*)")) {
                    matched = true;
                    message = "Invalid first operand.";
                    details = "ADC, RSB or RSC instruction first operand cannot be an immediate, label, R13 (SP) or R15 (PC). Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(ADC|RSB|RSC|SBC)(S?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)((R(1[0-5]|[0-9])|LR|SP|PC)|((#|=)?)(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])')))|((#|=)?)(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))).*)")) {
                    matched = true;
                    message = "Invalid destination.";
                    details = "ADC, RSB or RSC instruction destination cannot be an immediate, label, R13 (SP) or R15 (PC). Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(ADC|RSB|RSC|SBC)(S?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+).*)")) {
                    matched = true;
                    message = "Invalid instruction format for ADC, RSB or RSC instruction.";
                    details = "Press Ctrl+Space for more information.";
                }
            } else {
                matched = true;
                try {
                    instructions.add(SyntaxScanner.createInstructionForLine("", lineNumber, line, false, false));
                }
                catch (RuntimeError e) {
                    hasError = true;
                    message = e.getMessage();
                    details = e.getDetails();
                }
            }
        }
        if (!matched) {
            boolean bl5 = hasError = !line.matches(logical);
            if (hasError) {
                if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(AND|EOR|BIC|ORR|ORN)(S?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+;.*|\\s*))")) {
                    matched = true;
                    message = "Missing destination and all operands.";
                    details = "AND, EOR, BIC, ORR & ORN instructions require a destination and two operands. Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(AND|EOR|BIC|ORR|ORN)(S?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)((R(1[0-5]|[0-9])|LR|SP|PC)|((#|=)?)(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])')))|((#|=)?)(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,})))((\\s*,\\s*)?)(\\s+;.*|\\s*))")) {
                    matched = true;
                    message = "Missing all operands.";
                    details = "AND, EOR, BIC, ORR & ORN instructions require a destination and two operands. Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(AND|EOR|BIC|ORR|ORN)(S?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)((R(1[0-5]|[0-9])|LR|SP|PC)|((#|=)?)(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])')))|((#|=)?)(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,})))(\\s*,\\s*)((R(1[0-5]|[0-9])|LR|SP|PC)|((#|=)?)(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])')))|((#|=)?)(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,})))((\\s*,\\s*)?)(\\s+;.*|\\s*))")) {
                    matched = true;
                    message = "Missing second operand.";
                    details = "AND, EOR, BIC, ORR & ORN instructions require a destination and two operands. Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(AND|EOR|BIC|ORR|ORN)(S?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)(R(1[0-2]|14|[0-9])|LR)(\\s*,\\s*)(R(1[0-2]|14|[0-9])|LR)(\\s*,\\s*)((R15|PC)|(R13|SP))(\\s+;.*|\\s*))")) {
                    matched = true;
                    message = "Invalid second operand.";
                    details = "AND, EOR, BIC, ORR or ORN instruction second operand cannot be R13 (SP) or R15 (PC). Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(AND|EOR|BIC|ORR|ORN)(S?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)(R(1[0-2]|14|[0-9])|LR)(\\s*,\\s*)((R(1[0-5]|[0-9])|LR|SP|PC)|((#|=)?)(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])')))|((#|=)?)(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))).*)")) {
                    matched = true;
                    message = "Invalid first operand.";
                    details = "AND, EOR, BIC, ORR or ORN instruction first operand cannot be an immediate, label, R13 (SP) or R15 (PC). Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(AND|EOR|BIC|ORR|ORN)(S?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)((R(1[0-5]|[0-9])|LR|SP|PC)|((#|=)?)(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])')))|((#|=)?)(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))).*)")) {
                    matched = true;
                    message = "Invalid destination.";
                    details = "AND, EOR, BIC, ORR or ORN instruction destination cannot be an immediate, label, R13 (SP) or R15 (PC). Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(AND|EOR|BIC|ORR|ORN)(S?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+).*)")) {
                    matched = true;
                    message = "Invalid instruction format for AND, EOR, BIC, ORR or ORN instruction.";
                    details = "Press Ctrl+Space for more information.";
                }
            } else {
                matched = true;
                try {
                    instructions.add(SyntaxScanner.createInstructionForLine("", lineNumber, line, false, false));
                }
                catch (RuntimeError e) {
                    hasError = true;
                    message = e.getMessage();
                    details = e.getDetails();
                }
            }
        }
        if (!matched) {
            boolean bl6 = hasError = !line.matches(rrx);
            if (hasError) {
                if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(RRX)(S?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)((R(1[0-5]|[0-9])|LR|SP|PC)|((#|=)?)(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])')))|((#|=)?)(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,})))((\\s*,\\s*)?)(\\s+;.*|\\s*))")) {
                    matched = true;
                    message = "Missing source.";
                    details = "RRX instructions require a destination and source. Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(RRX)(S?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+;.*|\\s*))")) {
                    matched = true;
                    message = "Missing source and destination.";
                    details = "RRX instructions a destination and source. Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(RRX)(S?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)(R(1[0-24-5]|[0-9])|LR|PC)(\\s*,\\s*)((R(1[0-5]|[0-9])|LR|SP|PC)|((#|=)?)(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])')))|((#|=)?)(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,})))(\\s+;.*|\\s*))")) {
                    matched = true;
                    message = "Invalid source.";
                    details = "RRX instruction source cannot be an immediate, label or R13 (SP). Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(RRX)(S?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)((R(1[0-5]|[0-9])|LR|SP|PC)|((#|=)?)(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])')))|((#|=)?)(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))).*)")) {
                    matched = true;
                    message = "Invalid destination.";
                    details = "RRX instruction destination cannot be an immediate, label, R13 (SP) or R15 (PC). Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(RRX)(S?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+).*)")) {
                    matched = true;
                    message = "Invalid instruction format for RRX instruction.";
                    details = "Press Ctrl+Space for more information.";
                }
            } else {
                matched = true;
                try {
                    instructions.add(SyntaxScanner.createInstructionForLine("", lineNumber, line, false, false));
                }
                catch (RuntimeError e) {
                    hasError = true;
                    message = e.getMessage();
                    details = e.getDetails();
                }
            }
        }
        if (!matched) {
            boolean bl7 = hasError = hasError && !line.matches(otherShift);
            if (hasError) {
                if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(LSL|LSR|ASR|ROR)(S?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)((R(1[0-5]|[0-9])|LR|SP|PC)|((#|=)?)(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])')))|((#|=)?)(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,})))(\\s*,\\s*)((R(1[0-5]|[0-9])|LR|SP|PC)|((#|=)?)(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])')))|((#|=)?)(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,})))((\\s*,\\s*)?)(\\s+;.*|\\s*))")) {
                    matched = true;
                    message = "Missing second operand";
                    details = "LSL, LSR, ASR, & ROR instructions require a destination and two operands. Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(LSL|LSR|ASR|ROR)(S?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)((R(1[0-5]|[0-9])|LR|SP|PC)|((#|=)?)(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])')))|((#|=)?)(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,})))((\\s*,\\s*)?)(\\s+;.*|\\s*))")) {
                    matched = true;
                    message = "Missing all operands.";
                    details = "LSL, LSR, ASR, & ROR instructions require a destination and two operands. Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(LSL|LSR|ASR|ROR)(S?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+;.*|\\s*))")) {
                    matched = true;
                    message = "Missing destination and all operands.";
                    details = "LSL, LSR, ASR, & ROR instructions require a destination and two operands. Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(LSL|LSR|ASR|ROR)(S?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)(R(1[0-2]|14|[0-9])|LR)(\\s*,\\s*)(R(1[0-2]|14|[0-9])|LR).*)")) {
                    matched = true;
                    message = "Invalid second operand.";
                    details = "LSL, LSR, ASR, or ROR instruction second operand cannot be R13 (SP) or R15 (PC). Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(LSL|LSR|ASR|ROR)(S?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)(R(1[0-2]|14|[0-9])|LR)(\\s*,\\s*)((R(1[0-5]|[0-9])|LR|SP|PC)|((#|=)?)(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])')))|((#|=)?)(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))).*)")) {
                    matched = true;
                    message = "Invalid first operand.";
                    details = "LSL, LSR, ASR, or ROR instruction first operand cannot be an R13 (SP) or R15 (PC). Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(LSL|LSR|ASR|ROR)(S?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)((R(1[0-5]|[0-9])|LR|SP|PC)|((#|=)?)(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])')))|((#|=)?)(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))).*)")) {
                    matched = true;
                    message = "Invalid destination.";
                    details = "LSL, LSR, ASR, or ROR instruction destination cannot be an R13 (SP) or R15 (PC). Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(LSL|LSR|ASR|ROR)(S?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+).*)")) {
                    matched = true;
                    message = "Invalid instruction format for LSL, LSR, ASR or ROR instruction.";
                    details = "Press Ctrl+Space for more information.";
                }
            } else {
                matched = true;
                if (!hasError) {
                    try {
                        instructions.add(SyntaxScanner.createInstructionForLine("", lineNumber, line, false, false));
                    }
                    catch (RuntimeError e) {
                        hasError = true;
                        message = e.getMessage();
                        details = e.getDetails();
                    }
                }
            }
        }
        if (!matched) {
            boolean bl8 = hasError = !line.matches(compare);
            if (hasError) {
                if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(CMP|CMN)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+;.*|\\s*))")) {
                    matched = true;
                    message = "Missing all operands.";
                    details = "CMP and CMN instructions require two operands. Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(CMP|CMN)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)((R(1[0-5]|[0-9])|LR|SP|PC)|((#|=)?)(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])')))|((#|=)?)(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,})))((\\s*,\\s*)?)(\\s+;.*|\\s*))")) {
                    matched = true;
                    message = "Missing second operand.";
                    details = "CMP and CMN instructions require two operands. Press Ctrl+Space for more for information.";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(CMP|CMN)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)((R(1[0-5]|[0-9])|LR|SP|PC)|((#|=)?)(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])')))|((#|=)?)(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,})))(\\s*,\\s*)((R(1[0-5]|[0-9])|LR|SP|PC)|((#|=)?)(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])')))|((#|=)?)(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,})))(\\s+;.*|\\s*))")) {
                    matched = true;
                    message = "Invalid second operand.";
                    details = "CMP or CMN instruction second operand cannot be R13 (SP) or R15 (PC).";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(CMP|CMN)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)((R(1[0-5]|[0-9])|LR|SP|PC)|((#|=)?)(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])')))|((#|=)?)(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))).*)")) {
                    matched = true;
                    message = "Invalid first operand.";
                    details = "CMP or CMN instruction first operand cannot be an immediate, label or R15 (PC). Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(CMP|CMN)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+).*)")) {
                    matched = true;
                    message = "Invalid instruction format for CMP or CMN instruction.";
                    details = "Press Ctrl+Space for more information.";
                }
            } else {
                matched = true;
                try {
                    instructions.add(SyntaxScanner.createInstructionForLine("", lineNumber, line, false, false));
                }
                catch (RuntimeError e) {
                    hasError = true;
                    message = e.getMessage();
                    details = e.getDetails();
                }
            }
        }
        if (!matched) {
            boolean bl9 = hasError = !line.matches(test);
            if (hasError) {
                if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(TST|TEQ)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+;.*|\\s*))")) {
                    matched = true;
                    message = "Missing all operands.";
                    details = "TST and TEQ instructions require two operands. Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(TST|TEQ)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)((R(1[0-5]|[0-9])|LR|SP|PC)|((#|=)?)(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])')))|((#|=)?)(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,})))((\\s*,\\s*)?)(\\s+;.*|\\s*))")) {
                    matched = true;
                    message = "Missing second operand.";
                    details = "TST and TEQ instructions require two operands. Press Ctrl+Space for more for information.";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(TST|TEQ)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)((R(1[0-5]|[0-9])|LR|SP|PC)|((#|=)?)(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])')))|((#|=)?)(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,})))(\\s*,\\s*)((R(1[0-5]|[0-9])|LR|SP|PC)|((#|=)?)(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])')))|((#|=)?)(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,})))(\\s+;.*|\\s*))")) {
                    matched = true;
                    message = "Invalid second operand.";
                    details = "TST or TEQ instruction second operand cannot be R13 (SP) or R15 (PC).";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(TST|TEQ)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)((R(1[0-5]|[0-9])|LR|SP|PC)|((#|=)?)(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])')))|((#|=)?)(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))).*)")) {
                    matched = true;
                    message = "Invalid first operand.";
                    details = "TST or TEQ instruction first operand cannot be an immediate, label, R13 (SP) or R15 (PC). Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(TST|TEQ)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+).*)")) {
                    matched = true;
                    message = "Invalid instruction format for TST or TEQ instruction.";
                    details = "Press Ctrl+Space for more information.";
                }
            } else {
                matched = true;
                try {
                    instructions.add(SyntaxScanner.createInstructionForLine("", lineNumber, line, false, false));
                }
                catch (RuntimeError e) {
                    hasError = true;
                    message = e.getMessage();
                    details = e.getDetails();
                }
            }
        }
        if (!matched) {
            boolean bl10 = hasError = !line.matches(branch);
            if (hasError) {
                if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(BL|B)(\\s+;.*|\\s*))")) {
                    matched = true;
                    message = "Missing branch destination.";
                    details = "Branch instructions require a PC-relative expression (label or label expression) as the destination. Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(BL|B)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+).*)")) {
                    matched = true;
                    message = "Invalid branch destination.";
                    details = "Branch instructions require a PC-relative expression (label or expression) as the destination. Press Ctrl+Space for more information.";
                }
            } else {
                matched = true;
                try {
                    instructions.add(SyntaxScanner.createInstructionForLine("", lineNumber, line, false, false));
                }
                catch (RuntimeError e) {
                    hasError = true;
                    message = e.getMessage();
                    details = e.getDetails();
                }
            }
        }
        if (!matched) {
            boolean bl11 = hasError = !line.matches(adr);
            if (hasError) {
                if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(ADR)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)(R(1[0-5]|[0-9])|LR|SP|PC)((\\s*,\\s*)?)(\\s+;.*|\\s*))")) {
                    matched = true;
                    message = "Missing source.";
                    details = "ADR instructions require a source and destination. Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(ADR)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+;.*|\\s*))")) {
                    matched = true;
                    message = "Missing source and destination.";
                    details = "ADR instructions require a source and destination. Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(ADR)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)((R(1[0-5]|[0-9])|LR|SP|PC)|((#|=)?)(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])')))|((#|=)?)(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,})))(\\s*,\\s*)((R(1[0-5]|[0-9])|LR|SP|PC)|((#|=)?)(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])')))|((#|=)?)(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,})))(\\s+;.*|\\s*))")) {
                    matched = true;
                    message = "Invalid source.";
                    details = "ADR instruction source cannot be a register. Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(ADR)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)((R(1[0-5]|[0-9])|LR|SP|PC)|((#|=)?)(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])')))|((#|=)?)(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,})))((\\s*,\\s*)?).*)")) {
                    matched = true;
                    message = "Invalid destination.";
                    details = "ADR instruction destination cannot be an immediate, label or R13 (SP). Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(ADR)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+).*)")) {
                    matched = true;
                    message = "Invalid instruction format for ADR instruction.";
                    details = "Press Ctrl+Space for more information.";
                }
            } else {
                matched = true;
                try {
                    instructions.add(SyntaxScanner.createInstructionForLine("", lineNumber, line, false, false));
                }
                catch (RuntimeError e) {
                    hasError = true;
                    message = e.getMessage();
                    details = e.getDetails();
                }
            }
        }
        boolean ldrMatched = false;
        if (!matched) {
            boolean bl12 = hasError = !line.matches(ldrPseudo);
            if (hasError) {
                if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(LDR)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)(R(1[0-5]|[0-9])|LR|SP|PC)(\\s*,\\s*)=(\\s+;.*|\\s*))")) {
                    ldrMatched = true;
                    message = "Missing value to load.";
                    details = "The LDR psuedo-instruction requires a PC-relative expression (label or expression) as the source. Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(LDR)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)(R(1[0-5]|[0-9])|LR|SP|PC)(\\s*,\\s*)=.*)")) {
                    ldrMatched = true;
                    message = "Invalid value to load.";
                    details = "The LDR psuedo-instruction requires a PC-relative expression (label or expression) as the source. Press Ctrl+Space for more information.";
                }
            } else {
                matched = true;
                try {
                    instructions.add(SyntaxScanner.createInstructionForLine("MOV", lineNumber, line, false, false));
                }
                catch (RuntimeError e) {
                    hasError = true;
                    message = e.getMessage();
                    details = e.getDetails();
                }
            }
        }
        if (!matched) {
            boolean bl13 = hasError = !line.matches(ldrImmediateOffset);
            if (hasError && !ldrMatched) {
                boolean hasStartSquare;
                if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(LDR)(B?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+;.*|\\s*))")) {
                    ldrMatched = true;
                    message = "Missing destination register and source address specification.";
                    details = "LDR instructions require a destination and have multiple variants for the source address. Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(LDR)(B?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)(R(1[0-5]|[0-9])|LR|SP|PC)((\\s*,\\s*)?)(\\s+;.*|\\s*))")) {
                    ldrMatched = true;
                    message = "Missing source address specification.";
                    details = "LDR instructions require a destination and have multiple variants for the source address. Press Ctrl+Space for more information.";
                }
                if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(LDR)(B?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+).*)") && (hasStartSquare = line.contains("[")) ^ (hasEndSquare2 = line.contains("]"))) {
                    ldrMatched = true;
                    message = "Unbalanced square braces.";
                    details = "LDR instruction source address must be enclosed in square braces. Press Ctrl+Space for more information.";
                }
            } else if (!ldrMatched) {
                matched = true;
                if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(LDR)(B)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)((R15|PC)|(R13|SP)).*)")) {
                    hasError = true;
                    message = "Cannot use R13 (SP) or R15 (PC) as destination.";
                    details = "LDRB instructions do not allow use of R13 (SP) or R15 (PC) as the destination. Press Ctrl+Space for more information.";
                } else {
                    try {
                        instructions.add(SyntaxScanner.createInstructionForLine("", lineNumber, line, false, false));
                    }
                    catch (RuntimeError e) {
                        hasError = true;
                        message = e.getMessage();
                        details = e.getDetails();
                    }
                }
            }
        }
        if (!matched) {
            boolean bl14 = hasError = !line.matches(ldrImmediatePreIndexed);
            if (hasError && !ldrMatched) {
                boolean hasStartSquare;
                if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(LDR)(B?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+;.*|\\s*))")) {
                    ldrMatched = true;
                    message = "Missing destination register and source address specification.";
                    details = "LDR instructions require a destination and have multiple variants for the source address. Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(LDR)(B?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)(R(1[0-5]|[0-9])|LR|SP|PC)((\\s*,\\s*)?)(\\s+;.*|\\s*))")) {
                    ldrMatched = true;
                    message = "Missing source address specification.";
                    details = "LDR instructions require a destination and have multiple variants for the source address. Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(LDR)(B?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+).*(\\s*!\\s*).*)") && !line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(LDR)(B?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+).*(\\s*]\\s*)(\\s*!\\s*)(\\s+;.*|\\s*))")) {
                    ldrMatched = true;
                    message = "Unexpected placement of !";
                    details = "LDR instruction pre-index flag `!` must be at the end of the line. Press Ctrl+Space for more information.";
                }
                if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(LDR)(B?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+).*)") && (hasStartSquare = line.contains("[")) ^ (hasEndSquare2 = line.contains("]"))) {
                    ldrMatched = true;
                    message = "Unbalanced square braces.";
                    details = "LDR instruction source address must be enclosed in square braces. Press Ctrl+Space for more information.";
                }
            } else if (!ldrMatched) {
                matched = true;
                if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(LDR)(B)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)((R15|PC)|(R13|SP)).*)")) {
                    hasError = true;
                    message = "Cannot use R13 (SP) or R15 (PC) as destination.";
                    details = "LDRB instructions do not allow use of R13 (SP) or R15 (PC) as the destination. Press Ctrl+Space for more information.";
                } else {
                    List<Integer> regNames = SyntaxScanner.getRegNamesForLine(line);
                    if (regNames.get(0) == regNames.get(1)) {
                        hasError = true;
                        message = "Destination must be different from source base address.";
                        details = "LDR instruction destination must be different from source base address with pre/post-index offset enabled. Press Ctrl+Space for more information.";
                    } else {
                        try {
                            instructions.add(SyntaxScanner.createInstructionForLine("", lineNumber, line, true, false));
                        }
                        catch (RuntimeError e) {
                            hasError = true;
                            message = e.getMessage();
                            details = e.getDetails();
                        }
                    }
                }
            }
        }
        if (!matched) {
            boolean bl15 = hasError = !line.matches(ldrImmediatePostIndexed);
            if (hasError && !ldrMatched) {
                boolean hasEndSquare3;
                boolean hasStartSquare;
                if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(LDR)(B?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+;.*|\\s*))")) {
                    ldrMatched = true;
                    message = "Missing destination register and source address specification.";
                    details = "LDR instructions require a destination and have multiple variants for the source address. Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(LDR)(B?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)(R(1[0-5]|[0-9])|LR|SP|PC)((\\s*,\\s*)?)(\\s+;.*|\\s*))")) {
                    ldrMatched = true;
                    message = "Missing source address specification.";
                    details = "LDR instructions require a destination and have multiple variants for the source address. Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(LDR)(B?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+).*(\\s*!\\s*).*)") && !line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(LDR)(B?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+).*(\\s*]\\s*)(\\s*!\\s*)(\\s+;.*|\\s*))")) {
                    ldrMatched = true;
                    message = "Unexpected placement of !";
                    details = "LDR instruction pre-index flag `!` must be at the end of the line. Press Ctrl+Space for more information.";
                }
                if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(LDR)(B?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+).*)") && (hasStartSquare = line.contains("[")) ^ (hasEndSquare3 = line.contains("]"))) {
                    ldrMatched = true;
                    message = "Unbalanced square braces.";
                    details = "LDR instruction source address must be enclosed in square braces. Press Ctrl+Space for more information.";
                }
            } else if (!ldrMatched) {
                List<Integer> regNames;
                matched = true;
                if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(LDR)(B)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)((R15|PC)|(R13|SP)).*)")) {
                    hasError = true;
                    message = "Cannot use R13 (SP) or R15 (PC) as destination.";
                    details = "LDRB instructions do not allow use of R13 (SP) or R15 (PC) as the destination. Press Ctrl+Space for more information.";
                }
                if ((regNames = SyntaxScanner.getRegNamesForLine(line)).get(0) == regNames.get(1)) {
                    hasError = true;
                    message = "Destination must be different from source base address.";
                    details = "LDR instruction destination must be different from source base address with pre/post-index offset enabled. Press Ctrl+Space for more information.";
                } else if (!ldrMatched) {
                    try {
                        instructions.add(SyntaxScanner.createInstructionForLine("", lineNumber, line, false, true));
                    }
                    catch (RuntimeError e) {
                        hasError = true;
                        message = e.getMessage();
                        details = e.getDetails();
                    }
                }
            }
        }
        if (!matched) {
            boolean bl16 = hasError = !line.matches(ldrRegisterOffset);
            if (hasError && !ldrMatched) {
                boolean hasEndSquare4;
                boolean hasStartSquare;
                if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(LDR)(B?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+;.*|\\s*))")) {
                    ldrMatched = true;
                    message = "Missing destination register and source address specification.";
                    details = "LDR instructions require a destination and have multiple variants for the source address. Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(LDR)(B?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)(R(1[0-5]|[0-9])|LR|SP|PC)((\\s*,\\s*)?)(\\s+;.*|\\s*))")) {
                    ldrMatched = true;
                    message = "Missing source address specification.";
                    details = "LDR instructions require a destination and have multiple variants for the source address. Press Ctrl+Space for more information.";
                }
                if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(LDR)(B?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+).*)") && (hasStartSquare = line.contains("[")) ^ (hasEndSquare4 = line.contains("]"))) {
                    ldrMatched = true;
                    message = "Unbalanced square braces.";
                    details = "LDR instruction source address must be enclosed in square braces. Press Ctrl+Space for more information.";
                }
            } else if (!ldrMatched) {
                matched = true;
                if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(LDR)(B)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)((R15|PC)|(R13|SP)).*)")) {
                    hasError = true;
                    message = "Cannot use R13 (SP) or R15 (PC) as destination.";
                    details = "LDRB instructions do not allow use of R13 (SP) or R15 (PC) as the destination. Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(LDR)(B?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)(R(1[0-5]|[0-9])|LR|SP|PC)(\\s*,\\s*)(\\s*\\[\\s*)(R(1[0-5]|[0-9])|LR|SP|PC)(\\s*,\\s*)((R15|PC)|(R13|SP)).*)")) {
                    hasError = true;
                    message = "Cannot use R13 (SP) or R15 (PC) as offset.";
                    details = "LDR instructions with a register offset do not allow use of R13 (SP) or R15 (PC) as the offset. Press Ctrl+Space for more information.";
                } else {
                    try {
                        instructions.add(SyntaxScanner.createInstructionForLine("", lineNumber, line, false, false));
                    }
                    catch (RuntimeError e) {
                        hasError = true;
                        message = e.getMessage();
                        details = e.getDetails();
                    }
                }
            }
        }
        if (!matched) {
            boolean bl17 = hasError = !line.matches(ldrRegisterPreIndexed);
            if (hasError && !ldrMatched) {
                boolean hasEndSquare5;
                boolean hasStartSquare;
                if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(LDR)(B?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+;.*|\\s*))")) {
                    ldrMatched = true;
                    message = "Missing destination register and source address specification.";
                    details = "LDR instructions require a destination and have multiple variants for the source address. Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(LDR)(B?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)(R(1[0-5]|[0-9])|LR|SP|PC)((\\s*,\\s*)?)(\\s+;.*|\\s*))")) {
                    ldrMatched = true;
                    message = "Missing source address specification.";
                    details = "LDR instructions require a destination and have multiple variants for the source address. Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(LDR)(B?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+).*(\\s*!\\s*).*)") && !line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(LDR)(B?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+).*(\\s*]\\s*)(\\s*!\\s*)(\\s+;.*|\\s*))")) {
                    ldrMatched = true;
                    message = "Unexpected placement of !";
                    details = "LDR instruction pre-index flag `!` must be at the end of the line. Press Ctrl+Space for more information.";
                }
                if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(LDR)(B?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+).*)") && (hasStartSquare = line.contains("[")) ^ (hasEndSquare5 = line.contains("]"))) {
                    ldrMatched = true;
                    message = "Unbalanced square braces.";
                    details = "LDR instruction source address must be enclosed in square braces. Press Ctrl+Space for more information.";
                }
            } else if (!ldrMatched) {
                matched = true;
                if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(LDR)(B)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)((R15|PC)|(R13|SP)).*)")) {
                    hasError = true;
                    message = "Cannot use R13 (SP) or R15 (PC) as destination.";
                    details = "LDRB instructions do not allow use of R13 (SP) or R15 (PC) as the destination. Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(LDR)(B?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)(R(1[0-5]|[0-9])|LR|SP|PC)(\\s*,\\s*)(\\s*\\[\\s*)(R13|SP).*)")) {
                    hasError = true;
                    message = "Cannot use R13 (SP) as source base address.";
                    details = "LDR instructions with a register offset do not allow use of R13 (SP) or R15 (PC) as the source base address. Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(LDR)(B?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)(R(1[0-5]|[0-9])|LR|SP|PC)(\\s*,\\s*)(\\s*\\[\\s*)(R(1[0-5]|[0-9])|LR|SP|PC)(\\s*,\\s*)((R15|PC)|(R13|SP)).*)")) {
                    hasError = true;
                    message = "Cannot use R13 (SP) or R15 (PC) as offset.";
                    details = "LDR instructions with a register offset do not allow use of R13 (SP) or R15 (PC) as the offset. Press Ctrl+Space for more information.";
                } else {
                    List<Integer> regNames = SyntaxScanner.getRegNamesForLine(line);
                    if (regNames.get(0) == regNames.get(1)) {
                        hasError = true;
                        message = "Destination must be different from source base address.";
                        details = "LDR instruction destination must be different from source base address with pre/post-index offset enabled. Press Ctrl+Space for more information.";
                    } else {
                        try {
                            instructions.add(SyntaxScanner.createInstructionForLine("", lineNumber, line, true, false));
                        }
                        catch (RuntimeError e) {
                            hasError = true;
                            message = e.getMessage();
                            details = e.getDetails();
                        }
                    }
                }
            }
        }
        if (!matched) {
            boolean bl18 = hasError = !line.matches(ldrRegisterPostIndexed);
            if (hasError && !ldrMatched) {
                boolean hasEndSquare6;
                boolean hasStartSquare;
                if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(LDR)(B?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+;.*|\\s*))")) {
                    ldrMatched = true;
                    message = "Missing destination register and source address specification.";
                    details = "LDR instructions require a destination and have multiple variants for the source address. Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(LDR)(B?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)(R(1[0-5]|[0-9])|LR|SP|PC)((\\s*,\\s*)?)(\\s+;.*|\\s*))")) {
                    ldrMatched = true;
                    message = "Missing source address specification.";
                    details = "LDR instructions require a destination and have multiple variants for the source address. Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(LDR)(B?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+).*(\\s*!\\s*).*)") && !line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(LDR)(B?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+).*(\\s*]\\s*)(\\s*!\\s*)(\\s+;.*|\\s*))")) {
                    ldrMatched = true;
                    message = "Unexpected placement of !";
                    details = "LDR instruction pre-index flag `!` must be at the end of the line. Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(LDR)(B?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)(R(1[0-4]|[0-9])|LR|SP)(\\s*,\\s*).*)")) {
                    ldrMatched = true;
                    message = "Invalid source address specification.";
                    details = "LDR instruction source address must be a register, with optional offsets. Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(LDR)(B?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)((R(1[0-5]|[0-9])|LR|SP|PC)|((#|=)?)(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])')))|((#|=)?)(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,})))((\\s*,\\s*)?).*)")) {
                    ldrMatched = true;
                    message = "Invalid destination specified.";
                    details = "The destination for LDR instructions must be a register in the range R0-R14. Press Ctrl+Space for more information.";
                }
                if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(LDR)(B?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+).*)") && (hasStartSquare = line.contains("[")) ^ (hasEndSquare6 = line.contains("]"))) {
                    ldrMatched = true;
                    message = "Unbalanced square braces.";
                    details = "LDR instruction source address must be enclosed in square braces. Press Ctrl+Space for more information.";
                }
            } else if (!ldrMatched) {
                matched = true;
                if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(LDR)(B)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)((R15|PC)|(R13|SP)).*)")) {
                    hasError = true;
                    message = "Cannot use R13 (SP) or R15 (PC) as destination.";
                    details = "LDRB instructions do not allow use of R13 (SP) or R15 (PC) as the destination. Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(LDR)(B?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)(R(1[0-5]|[0-9])|LR|SP|PC)(\\s*,\\s*)(\\s*\\[\\s*)(R13|SP).*)")) {
                    hasError = true;
                    message = "Cannot use R13 (SP) as source base address.";
                    details = "LDR instructions with a register offset do not allow use of R13 (SP) or R15 (PC) as the source base address. Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(LDR)(B?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)(R(1[0-5]|[0-9])|LR|SP|PC)(\\s*,\\s*)(\\s*\\[\\s*)(R(1[0-5]|[0-9])|LR|SP|PC)(\\s*,\\s*)((R15|PC)|(R13|SP)).*)")) {
                    hasError = true;
                    message = "Cannot use R13 (SP) or R15 (PC) as offset.";
                    details = "LDR instructions with a register offset do not allow use of R13 (SP) or R15 (PC) as the offset. Press Ctrl+Space for more information.";
                } else {
                    List<Integer> regNames = SyntaxScanner.getRegNamesForLine(line);
                    if (regNames.get(0) == regNames.get(1)) {
                        hasError = true;
                        message = "Destination must be different from source base address.";
                        details = "LDR instruction destination must be different from source base address with pre/post-index offset enabled. Press Ctrl+Space for more information.";
                    } else {
                        try {
                            instructions.add(SyntaxScanner.createInstructionForLine("", lineNumber, line, false, true));
                        }
                        catch (RuntimeError e) {
                            hasError = true;
                            message = e.getMessage();
                            details = e.getDetails();
                        }
                    }
                }
            }
        }
        if (!matched) {
            matched = ldrMatched;
        }
        boolean strMatched = false;
        if (!matched) {
            boolean bl19 = hasError = !line.matches(strImmediateOffset);
            if (hasError) {
                boolean hasStartSquare;
                if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(STR)(B?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+;.*|\\s*))")) {
                    strMatched = true;
                    message = "Missing destination register and source address specification.";
                    details = "STR instructions require a destination and have multiple variants for the source address. Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(STR)(B?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)(R(1[0-5]|[0-9])|LR|SP|PC)((\\s*,\\s*)?)(\\s+;.*|\\s*))")) {
                    strMatched = true;
                    message = "Missing source address specification.";
                    details = "STR instructions require a destination and have multiple variants for the source address. Press Ctrl+Space for more information.";
                }
                if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(STR)(B?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+).*)") && (hasStartSquare = line.contains("[")) ^ (hasEndSquare = line.contains("]"))) {
                    ldrMatched = true;
                    message = "Unbalanced square braces.";
                    details = "STR instruction destination address must be enclosed in square braces. Press Ctrl+Space for more information.";
                }
            } else {
                matched = true;
                if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(STR)(B)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)((R15|PC)|(R13|SP)).*)")) {
                    hasError = true;
                    message = "Cannot use R13 (SP) or R15 (PC) as source register.";
                    details = "STRB instructions do not allow use of R13 (SP) or R15 (PC) as the source. Press Ctrl+Space for more information.";
                } else {
                    try {
                        instructions.add(SyntaxScanner.createInstructionForLine("", lineNumber, line, false, false));
                    }
                    catch (RuntimeError e) {
                        hasError = true;
                        message = e.getMessage();
                        details = e.getDetails();
                    }
                }
            }
        }
        if (!matched) {
            boolean bl20 = hasError = !line.matches(strImmediatePreIndexed);
            if (hasError && !strMatched) {
                boolean hasStartSquare;
                if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(STR)(B?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+;.*|\\s*))")) {
                    strMatched = true;
                    message = "Missing destination register and source address specification.";
                    details = "STR instructions require a destination and have multiple variants for the source address. Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(STR)(B?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)(R(1[0-5]|[0-9])|LR|SP|PC)((\\s*,\\s*)?)(\\s+;.*|\\s*))")) {
                    strMatched = true;
                    message = "Missing source address specification.";
                    details = "STR instructions require a destination and have multiple variants for the source address. Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(STR)(B?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+).*(\\s*!\\s*).*)") && !line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(STR)(B?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+).*(\\s*]\\s*)(\\s*!\\s*)(\\s+;.*|\\s*))")) {
                    strMatched = true;
                    message = "Unexpected placement of !";
                    details = "STR instruction pre-index flag `!` must be at the end of the line. Press Ctrl+Space for more information.";
                }
                if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(STR)(B?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+).*)") && (hasStartSquare = line.contains("[")) ^ (hasEndSquare = line.contains("]"))) {
                    ldrMatched = true;
                    message = "Unbalanced square braces.";
                    details = "STR instruction destination address must be enclosed in square braces. Press Ctrl+Space for more information.";
                }
            } else if (!strMatched) {
                List<Integer> regNames;
                matched = true;
                if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(STR)(B)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)((R15|PC)|(R13|SP)).*)")) {
                    hasError = true;
                    message = "Cannot use R13 (SP) or R15 (PC) as source register.";
                    details = "STRB instructions do not allow use of R13 (SP) or R15 (PC) as the source. Press Ctrl+Space for more information.";
                }
                if ((regNames = SyntaxScanner.getRegNamesForLine(line)).get(0) == regNames.get(1)) {
                    hasError = true;
                    message = "Source register must be different from destination base address.";
                    details = "STR instruction source register must be different from destination base address with pre/post-index offset enabled. Press Ctrl+Space for more information.";
                } else {
                    try {
                        instructions.add(SyntaxScanner.createInstructionForLine("", lineNumber, line, true, false));
                    }
                    catch (RuntimeError e) {
                        hasError = true;
                        message = e.getMessage();
                        details = e.getDetails();
                    }
                }
            }
        }
        if (!matched) {
            boolean bl21 = hasError = !line.matches(strImmediatePostIndexed);
            if (hasError && !strMatched) {
                boolean hasEndSquare7;
                boolean hasStartSquare;
                if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(STR)(B?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+;.*|\\s*))")) {
                    ldrMatched = true;
                    message = "Missing source register and destination address specification.";
                    details = "STR instructions require a destination and have multiple variants for the destination address. Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(STR)(B?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)(R(1[0-5]|[0-9])|LR|SP|PC)((\\s*,\\s*)?)(\\s+;.*|\\s*))")) {
                    ldrMatched = true;
                    message = "Missing destination address specification.";
                    details = "STR instructions require a destination and have multiple variants for the destination address. Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(STR)(B?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+).*(\\s*!\\s*).*)") && !line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(STR)(B?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+).*(\\s*]\\s*)(\\s*!\\s*)(\\s+;.*|\\s*))")) {
                    ldrMatched = true;
                    message = "Unexpected placement of !";
                    details = "STR instruction pre-index flag `!` must be at the end of the line. Press Ctrl+Space for more information.";
                }
                if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(STR)(B?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+).*)") && (hasStartSquare = line.contains("[")) ^ (hasEndSquare7 = line.contains("]"))) {
                    ldrMatched = true;
                    message = "Unbalanced square braces.";
                    details = "STR instruction destination address must be enclosed in square braces. Press Ctrl+Space for more information.";
                }
            } else if (!strMatched) {
                List<Integer> regNames;
                matched = true;
                if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(STR)(B)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)((R15|PC)|(R13|SP)).*)")) {
                    hasError = true;
                    message = "Cannot use R13 (SP) or R15 (PC) as source register.";
                    details = "STRB instructions do not allow use of R13 (SP) or R15 (PC) as the source. Press Ctrl+Space for more information.";
                }
                if ((regNames = SyntaxScanner.getRegNamesForLine(line)).get(0) == regNames.get(1)) {
                    hasError = true;
                    message = "Source register must be different from destination base address.";
                    details = "STR instruction source register must be different from destination base address with pre/post-index offset enabled. Press Ctrl+Space for more information.";
                } else {
                    try {
                        instructions.add(SyntaxScanner.createInstructionForLine("", lineNumber, line, false, true));
                    }
                    catch (RuntimeError e) {
                        hasError = true;
                        message = e.getMessage();
                        details = e.getDetails();
                    }
                }
            }
        }
        if (!matched) {
            boolean bl22 = hasError = !line.matches(strRegisterOffset);
            if (hasError && !strMatched) {
                boolean hasEndSquare8;
                boolean hasStartSquare;
                if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(STR)(B?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+;.*|\\s*))")) {
                    strMatched = true;
                    message = "Missing destination register and source address specification.";
                    details = "STR instructions require a destination and have multiple variants for the source address. Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(STR)(B?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)(R(1[0-5]|[0-9])|LR|SP|PC)((\\s*,\\s*)?)(\\s+;.*|\\s*))")) {
                    strMatched = true;
                    message = "Missing source address specification.";
                    details = "STR instructions require a destination and have multiple variants for the source address. Press Ctrl+Space for more information.";
                }
                if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(STR)(B?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+).*)") && (hasStartSquare = line.contains("[")) ^ (hasEndSquare8 = line.contains("]"))) {
                    ldrMatched = true;
                    message = "Unbalanced square braces.";
                    details = "STR instruction destination address must be enclosed in square braces. Press Ctrl+Space for more information.";
                }
            } else if (!strMatched) {
                matched = true;
                if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(STR)(B)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)((R15|PC)|(R13|SP)).*)")) {
                    hasError = true;
                    message = "Cannot use R13 (SP) or R15 (PC) as source register.";
                    details = "STRB instructions do not allow use of R13 (SP) or R15 (PC) as the source. Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(STR)(B?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)(R(1[0-5]|[0-9])|LR|SP|PC)(\\s*,\\s*)(\\s*\\[\\s*)(R(1[0-5]|[0-9])|LR|SP|PC)(\\s*,\\s*)((R15|PC)|(R13|SP)).*)")) {
                    hasError = true;
                    message = "Cannot use R13 (SP) or R15 (PC) as offset.";
                    details = "STR instructions with a register offset do not allow use of R13 (SP) or R15 (PC) as the offset. Press Ctrl+Space for more information.";
                } else {
                    try {
                        instructions.add(SyntaxScanner.createInstructionForLine("", lineNumber, line, false, false));
                    }
                    catch (RuntimeError e) {
                        hasError = true;
                        message = e.getMessage();
                        details = e.getDetails();
                    }
                }
            }
        }
        if (!matched) {
            boolean bl23 = hasError = !line.matches(strRegisterPreIndexed);
            if (hasError && !strMatched) {
                boolean hasEndSquare9;
                boolean hasStartSquare;
                if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(STR)(B?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+;.*|\\s*))")) {
                    ldrMatched = true;
                    message = "Missing source register and destination address specification.";
                    details = "STR instructions require a destination and have multiple variants for the destination address. Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(STR)(B?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)(R(1[0-5]|[0-9])|LR|SP|PC)((\\s*,\\s*)?)(\\s+;.*|\\s*))")) {
                    ldrMatched = true;
                    message = "Missing destination address specification.";
                    details = "STR instructions require a destination and have multiple variants for the destination address. Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(STR)(B?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+).*(\\s*!\\s*).*)") && !line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(STR)(B?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+).*(\\s*]\\s*)(\\s*!\\s*)(\\s+;.*|\\s*))")) {
                    ldrMatched = true;
                    message = "Unexpected placement of !";
                    details = "STR instruction pre-index flag `!` must be at the end of the line. Press Ctrl+Space for more information.";
                }
                if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(STR)(B?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+).*)") && (hasStartSquare = line.contains("[")) ^ (hasEndSquare9 = line.contains("]"))) {
                    ldrMatched = true;
                    message = "Unbalanced square braces.";
                    details = "STR instruction destination address must be enclosed in square braces. Press Ctrl+Space for more information.";
                }
            } else if (!strMatched) {
                matched = true;
                if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(STR)(B)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)((R15|PC)|(R13|SP)).*)")) {
                    hasError = true;
                    message = "Cannot use R13 (SP) or R15 (PC) as source register.";
                    details = "STRB instructions do not allow use of R13 (SP) or R15 (PC) as the source. Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(STR)(B?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)(R(1[0-5]|[0-9])|LR|SP|PC)(\\s*,\\s*)(\\s*\\[\\s*)(R13|SP).*)")) {
                    hasError = true;
                    message = "Cannot use R13 (SP) as destination base address.";
                    details = "STR instructions with a register offset do not allow use of R13 (SP) or R15 (PC) as the source base address. Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(STR)(B?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)(R(1[0-5]|[0-9])|LR|SP|PC)(\\s*,\\s*)(\\s*\\[\\s*)(R(1[0-5]|[0-9])|LR|SP|PC)(\\s*,\\s*)((R15|PC)|(R13|SP)).*)")) {
                    hasError = true;
                    message = "Cannot use R13 (SP) or R15 (PC) as offset.";
                    details = "STR instructions with a register offset do not allow use of R13 (SP) or R15 (PC) as the offset. Press Ctrl+Space for more information.";
                } else {
                    List<Integer> regNames = SyntaxScanner.getRegNamesForLine(line);
                    if (regNames.get(0) == regNames.get(1)) {
                        hasError = true;
                        message = "Source register must be different from destination base address.";
                        details = "STR instruction source register must be different from destination base address with pre/post-index offset enabled. Press Ctrl+Space for more information.";
                    } else {
                        try {
                            instructions.add(SyntaxScanner.createInstructionForLine("", lineNumber, line, true, false));
                        }
                        catch (RuntimeError e) {
                            hasError = true;
                            message = e.getMessage();
                            details = e.getDetails();
                        }
                    }
                }
            }
        }
        if (!matched) {
            boolean bl24 = hasError = !line.matches(strRegisterPostIndexed);
            if (hasError && !strMatched) {
                boolean hasEndSquare10;
                boolean hasStartSquare;
                if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(STR)(B?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+;.*|\\s*))")) {
                    ldrMatched = true;
                    message = "Missing source register and destination address specification.";
                    details = "STR instructions require a destination and have multiple variants for the destination address. Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(STR)(B?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)(R(1[0-5]|[0-9])|LR|SP|PC)((\\s*,\\s*)?)(\\s+;.*|\\s*))")) {
                    ldrMatched = true;
                    message = "Missing destination address specification.";
                    details = "STR instructions require a destination and have multiple variants for the destination address. Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(STR)(B?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+).*(\\s*!\\s*).*)") && !line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(STR)(B?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+).*(\\s*]\\s*)(\\s*!\\s*)(\\s+;.*|\\s*))")) {
                    ldrMatched = true;
                    message = "Unexpected placement of !";
                    details = "STR instruction pre-index flag `!` must be at the end of the line. Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(STR)(B?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)(R(1[0-4]|[0-9])|LR|SP)(\\s*,\\s*).*)")) {
                    strMatched = true;
                    message = "Invalid destination address specification.";
                    details = "STR instruction destination address must be a register, with optional offsets. Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(STR)(B?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)((R(1[0-5]|[0-9])|LR|SP|PC)|((#|=)?)(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])')))|((#|=)?)(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,})))((\\s*,\\s*)?).*)")) {
                    ldrMatched = true;
                    message = "Invalid source specified.";
                    details = "The source for STR instructions must be a register in the range R0-R14. Press Ctrl+Space for more information.";
                }
                if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(STR)(B?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+).*)") && (hasStartSquare = line.contains("[")) ^ (hasEndSquare10 = line.contains("]"))) {
                    ldrMatched = true;
                    message = "Unbalanced square braces.";
                    details = "STR instruction destination address must be enclosed in square braces. Press Ctrl+Space for more information.";
                }
            } else if (!strMatched) {
                matched = true;
                if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(STR)(B)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)((R15|PC)|(R13|SP)).*)")) {
                    hasError = true;
                    message = "Cannot use R13 (SP) or R15 (PC) as source register.";
                    details = "STRB instructions do not allow use of R13 (SP) or R15 (PC) as the source. Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(STR)(B?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)(R(1[0-5]|[0-9])|LR|SP|PC)(\\s*,\\s*)(\\s*\\[\\s*)(R13|SP).*)")) {
                    hasError = true;
                    message = "Cannot use R13 (SP) as destination base address.";
                    details = "STR instructions with a register offset do not allow use of R13 (SP) or R15 (PC) as the source base address. Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(STR)(B?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)(R(1[0-5]|[0-9])|LR|SP|PC)(\\s*,\\s*)(\\s*\\[\\s*)(R(1[0-5]|[0-9])|LR|SP|PC)(\\s*,\\s*)((R15|PC)|(R13|SP)).*)")) {
                    hasError = true;
                    message = "Cannot use R13 (SP) or R15 (PC) as offset.";
                    details = "STR instructions with a register offset do not allow use of R13 (SP) or R15 (PC) as the offset. Press Ctrl+Space for more information.";
                } else {
                    List<Integer> regNames = SyntaxScanner.getRegNamesForLine(line);
                    if (regNames.get(0) == regNames.get(1)) {
                        hasError = true;
                        message = "Source register must be different from destination base address.";
                        details = "STR instruction source register must be different from destination base address with pre/post-index offset enabled. Press Ctrl+Space for more information.";
                    } else {
                        try {
                            instructions.add(SyntaxScanner.createInstructionForLine("", lineNumber, line, false, true));
                        }
                        catch (RuntimeError e) {
                            hasError = true;
                            message = e.getMessage();
                            details = e.getDetails();
                        }
                    }
                }
            }
        }
        if (!matched) {
            matched = strMatched;
        }
        if (!matched) {
            boolean bl25 = hasError = !line.matches(ldm);
            if (hasError) {
                boolean hasEndCurly;
                boolean hasStartCurly;
                if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(LDM)((FD|FA|ED|EA|IB|IA|DB|DA)?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+;.*|\\s*))")) {
                    matched = true;
                    message = "Missing stack pointer register and list of registers to load.";
                    details = "LDM instructions require a stack pointer register and a list of one or more registers to load. Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(LDM)((FD|FA|ED|EA|IB|IA|DB|DA)?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)((R(1[0-5]|[0-9])|LR|SP|PC)|((#|=)?)(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])')))|((#|=)?)(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,})))((\\s*!\\s*)?)((\\s*,\\s*)?)(\\s+;.*|\\s*))")) {
                    matched = true;
                    message = "Missing list of registers to load.";
                    details = "LDM instructions require a stack pointer register and a list of one or more registers to load. Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(LDM)((FD|FA|ED|EA|IB|IA|DB|DA)?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)(R(1[0-4]|[0-9])|LR|SP)((\\s*!\\s*)?)(\\s*,\\s*)(\\s*\\{\\s*)(?i:((((R(1[0-5]|[0-9])|LR|SP|PC)(\\s*-\\s*)(R(1[0-5]|[0-9])|LR|SP|PC)(\\s*,\\s*))+(((R(1[0-5]|[0-9])|LR|SP|PC)(\\s*-\\s*)(R(1[0-5]|[0-9])|LR|SP|PC))|(R(1[0-5]|[0-9])|LR|SP|PC)))|(((R(1[0-5]|[0-9])|LR|SP|PC)(\\s*,\\s*))+(((R(1[0-5]|[0-9])|LR|SP|PC)(\\s*-\\s*)(R(1[0-5]|[0-9])|LR|SP|PC))|(R(1[0-5]|[0-9])|LR|SP|PC)))|((R(1[0-5]|[0-9])|LR|SP|PC)(\\s*-\\s*)(R(1[0-5]|[0-9])|LR|SP|PC))|((R(1[0-5]|[0-9])|LR|SP|PC)))(((\\s*,\\s*)((R(1[0-5]|[0-9])|LR|SP|PC)(\\s*-\\s*)(R(1[0-5]|[0-9])|LR|SP|PC))|(\\s*,\\s*)((R(1[0-5]|[0-9])|LR|SP|PC)))*)).*)")) {
                    matched = true;
                    message = "Invalid list of registers to load.";
                    details = "The list must be comma-separated if it contains multiple registers, multiple register ranges, or a combination of these. It cannot contain R13 (SP). Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(LDM)((FD|FA|ED|EA|IB|IA|DB|DA)?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)((R(1[0-5]|[0-9])|LR|SP|PC)|((#|=)?)(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])')))|((#|=)?)(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))).*)")) {
                    matched = true;
                    message = "Invalid stack pointer register specified.";
                    details = "The stack pointer register must be a register in the range R0-R14. Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(LDM)((FD|FA|ED|EA|IB|IA|DB|DA)?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+).*)")) {
                    matched = true;
                    message = "Invalid format for LDM instruction.";
                    details = "Press Ctrl+Space for more information.";
                }
                if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(LDM)((FD|FA|ED|EA|IB|IA|DB|DA)?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+).*)") && (hasStartCurly = line.contains("{")) ^ (hasEndCurly = line.contains("}"))) {
                    matched = true;
                    message = "Unbalanced curly braces.";
                    details = "The list of registers to load must be enclosed in curly braces. Press Ctrl+Space for more information.";
                }
            } else {
                matched = true;
                List<Integer> regsToLoad = SyntaxScanner.getRegNamesForLine(line);
                if (regsToLoad.contains(14) && regsToLoad.contains(15)) {
                    hasError = true;
                    message = "List of registers to load cannot include both R14 (LR) and R15 (PC).";
                    details = "LDM instructions that load both LR and PC are deprecated. LR and PC can still be loaded indepently.";
                } else if (regsToLoad.subList(1, regsToLoad.size()).contains(13)) {
                    hasError = true;
                    message = "List of registers to load cannot include R13 (SP).";
                    details = "LDM instructions do not allow loading to R13 (SP). Press Ctrl+Space for more information.";
                } else if (regsToLoad.subList(1, regsToLoad.size()).contains(regsToLoad.get(0))) {
                    hasError = true;
                    message = "Stack pointer for LDM instruction cannot be in list of registers to load.";
                    details = "Press Ctrl+Space for more information.";
                } else {
                    try {
                        boolean writeBack = line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(LDM)((FD|FA|ED|EA|IB|IA|DB|DA)?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)(R(1[0-4]|[0-9])|LR|SP)(\\s*!\\s*).*)");
                        instructions.add(SyntaxScanner.createInstructionForLine("", lineNumber, line, writeBack, false));
                    }
                    catch (RuntimeError e) {
                        hasError = true;
                        message = e.getMessage();
                        details = e.getDetails();
                    }
                }
            }
        }
        if (!matched) {
            boolean bl26 = hasError = !line.matches(stm);
            if (hasError) {
                boolean hasEndCurly;
                boolean hasStartCurly;
                if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(STM)((FD|FA|ED|EA|IB|IA|DB|DA)?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+;.*|\\s*))")) {
                    matched = true;
                    message = "Missing stack pointer register and list of registers to store.";
                    details = "STM instructions require a stack pointer register and a list of one or more registers to store. Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(STM)((FD|FA|ED|EA|IB|IA|DB|DA)?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)((R(1[0-5]|[0-9])|LR|SP|PC)|((#|=)?)(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])')))|((#|=)?)(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,})))((\\s*!\\s*)?)((\\s*,\\s*)?)(\\s+;.*|\\s*))")) {
                    matched = true;
                    message = "Missing list of registers to store.";
                    details = "STM instructions require a stack pointer register and a list of one or more registers to store. Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(STM)((FD|FA|ED|EA|IB|IA|DB|DA)?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)(R(1[0-4]|[0-9])|LR|SP)((\\s*!\\s*)?)(\\s*,\\s*)(\\s*\\{\\s*)(?i:((((R(1[0-5]|[0-9])|LR|SP|PC)(\\s*-\\s*)(R(1[0-5]|[0-9])|LR|SP|PC)(\\s*,\\s*))+(((R(1[0-5]|[0-9])|LR|SP|PC)(\\s*-\\s*)(R(1[0-5]|[0-9])|LR|SP|PC))|(R(1[0-5]|[0-9])|LR|SP|PC)))|(((R(1[0-5]|[0-9])|LR|SP|PC)(\\s*,\\s*))+(((R(1[0-5]|[0-9])|LR|SP|PC)(\\s*-\\s*)(R(1[0-5]|[0-9])|LR|SP|PC))|(R(1[0-5]|[0-9])|LR|SP|PC)))|((R(1[0-5]|[0-9])|LR|SP|PC)(\\s*-\\s*)(R(1[0-5]|[0-9])|LR|SP|PC))|((R(1[0-5]|[0-9])|LR|SP|PC)))(((\\s*,\\s*)((R(1[0-5]|[0-9])|LR|SP|PC)(\\s*-\\s*)(R(1[0-5]|[0-9])|LR|SP|PC))|(\\s*,\\s*)((R(1[0-5]|[0-9])|LR|SP|PC)))*)).*)")) {
                    matched = true;
                    message = "Invalid list of registers to store.";
                    details = "The list must be comma-separated if it contains multiple registers, multiple register ranges, or a combination of these. It cannot include R13 (SP) or R15 (PC). Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(STM)((FD|FA|ED|EA|IB|IA|DB|DA)?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)((R(1[0-5]|[0-9])|LR|SP|PC)|((#|=)?)(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])')))|((#|=)?)(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))).*)")) {
                    matched = true;
                    message = "Invalid stack pointer register specified.";
                    details = "The stack pointer register must be a register in the range R0-R14. Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(STM)((FD|FA|ED|EA|IB|IA|DB|DA)?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+).*)")) {
                    matched = true;
                    message = "Invalid format for STM instruction.";
                    details = "Press Ctrl+Space for more information.";
                }
                if (line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(STM)((FD|FA|ED|EA|IB|IA|DB|DA)?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+).*)") && (hasStartCurly = line.contains("{")) ^ (hasEndCurly = line.contains("}"))) {
                    matched = true;
                    message = "Unbalanced curly braces.";
                    details = "The list of registers to store must be enclosed in curly braces. Press Ctrl+Space for more information.";
                }
            } else {
                matched = true;
                List<Integer> regsToLoad = SyntaxScanner.getRegNamesForLine(line);
                if (regsToLoad.subList(1, regsToLoad.size()).contains(regsToLoad.get(0))) {
                    hasError = true;
                    message = "Stack pointer for STM cannot be in list of registers to load.";
                    details = "Press Ctrl+Space for more information.";
                } else {
                    try {
                        boolean writeBack = line.matches("(?i:((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?)(STM)((FD|FA|ED|EA|IB|IA|DB|DA)?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)(\\s+)(R(1[0-4]|[0-9])|LR|SP)(\\s*!\\s*).*)");
                        instructions.add(SyntaxScanner.createInstructionForLine("", lineNumber, line, writeBack, false));
                    }
                    catch (RuntimeError e) {
                        hasError = true;
                        message = e.getMessage();
                        details = e.getDetails();
                    }
                }
            }
        }
        if (!matched) {
            boolean bl27 = hasError = !line.matches(dcd);
            if (hasError) {
                if (line.matches("(?i:\\s*(DCD)(\\s+;.*|\\s*))")) {
                    matched = true;
                    message = "Missing directive label and list of words to define.";
                    details = "Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))\\s+(DCD)(\\s+;.*|\\s*))")) {
                    matched = true;
                    message = "Missing word or list of words to define.";
                    details = "Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:\\s*(DCD)(\\s+).*)")) {
                    matched = true;
                    message = "Missing directive label.";
                    details = "DCD directives require a label for the list of words being defined. Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))\\s+(DCD)(\\s+).*)")) {
                    matched = true;
                    message = "Invalid word or list of words to define.";
                    details = "Each word must be an expression or a numerical value. Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:\\s*((R(1[0-5]|[0-9])|LR|SP|PC)|((#|=)?)(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])')))|((#|=)?)(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,})))\\s+(DCD)(\\s+).*)")) {
                    matched = true;
                    message = "Invalid directive label.";
                    details = "Directive label cannot be an opcode or register. Press Ctrl+Space for more information.";
                }
            } else {
                matched = true;
                Pattern p = Pattern.compile("(?<=(?i:DCD)\\s{1,100})(((((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])')))(\\s*,\\s*))*(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))");
                Matcher m = p.matcher(line);
                expressionSubString = "";
                found = false;
                while (m.find() && !found) {
                    expressionSubString = m.group(1).trim();
                    found = true;
                }
                expressions = expressionSubString.split(comma);
                values = new ArrayList<Integer>();
                for (int i = 0; i < expressions.length; ++i) {
                    try {
                        values.add(SyntaxScanner.solveExpression(lineNumber, expressions[i], symbols, dcdWords, lineLabels));
                        continue;
                    }
                    catch (RuntimeError e) {
                        hasError = true;
                        message = e.getMessage();
                        details = e.getDetails();
                    }
                }
                label = SyntaxScanner.getLabelForLine(line);
                w = new DcdWord(label, values, emulator.memory, lineNumber, false, deferSceneUpdates);
                dcdWords.add(w);
                emulator.addDcdWord(w);
                if (label.length() > maxLabelLength) {
                    maxLabelLength = label.length();
                }
            }
        }
        if (!matched) {
            boolean bl28 = hasError = !line.matches(dcb);
            if (hasError) {
                if (line.matches("(?i:\\s*(DCB)(\\s+;.*|\\s*))")) {
                    matched = true;
                    message = "Missing directive label and list of bytes to define.";
                    details = "Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))\\s+(DCB)(\\s+;.*|\\s*))")) {
                    matched = true;
                    message = "Missing byte or list of bytes to define.";
                    details = "Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:\\s*(DCB)(\\s+).*)")) {
                    matched = true;
                    message = "Missing directive label.";
                    details = "DCB directives require a label for the list of bytes being defined. Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))\\s+(DCB)(\\s+).*)")) {
                    matched = true;
                    message = "Invalid byte or list of bytes to define.";
                    details = "Each byte must be an expression or a numerical value. Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:\\s*((R(1[0-5]|[0-9])|LR|SP|PC)|((#|=)?)(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])')))|((#|=)?)(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,})))\\s+(DCB)(\\s+).*)")) {
                    matched = true;
                    message = "Invalid directive label.";
                    details = "Directive label cannot be an opcode or register. Press Ctrl+Space for more information.";
                }
            } else {
                matched = true;
                Pattern p = Pattern.compile("(?<=(?i:DCB)\\s{1,100})(((((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])')))(\\s*,\\s*))*(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))))");
                Matcher m = p.matcher(line);
                expressionSubString = "";
                found = false;
                while (m.find() && !found) {
                    expressionSubString = m.group(1).trim();
                    found = true;
                }
                expressions = expressionSubString.split(comma);
                values = new ArrayList();
                for (int i = 0; i < expressions.length; ++i) {
                    try {
                        int value = SyntaxScanner.solveExpression(lineNumber, expressions[i], symbols, dcdWords, lineLabels);
                        if (value <= 255 && value >= -128) {
                            values.add(value);
                            continue;
                        }
                        hasError = true;
                        message = "Expression value for one or more bytes is outside permitted range.";
                        details = "For DCB, each expression must be a constant in the range -128 to 255, or an expression evaluating to the same range.";
                        continue;
                    }
                    catch (RuntimeError e) {
                        hasError = true;
                        message = e.getMessage();
                        details = e.getDetails();
                    }
                }
                label = SyntaxScanner.getLabelForLine(line);
                w = new DcdWord(label, values, emulator.memory, lineNumber, true, deferSceneUpdates);
                dcdWords.add(w);
                emulator.addDcdWord(w);
                if (label.length() > maxLabelLength) {
                    maxLabelLength = label.length();
                }
            }
        }
        if (!matched) {
            boolean bl29 = hasError = !line.matches(equ);
            if (hasError) {
                if (line.matches("(?i:\\s*(EQU)(\\s+;.*|\\s*))")) {
                    matched = true;
                    message = "Missing directive label and value to define as a constant.";
                    details = "Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))\\s+(EQU)(\\s+;.*|\\s*))")) {
                    matched = true;
                    message = "Missing value to define as a constant.";
                    details = "Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:\\s*(EQU)(\\s+).*)")) {
                    matched = true;
                    message = "Missing directive label.";
                    details = "EQU directives require a label for the value being defined as a constant. Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))\\s+(EQU)(\\s+).*)")) {
                    matched = true;
                    message = "Invalid value to define as a constant.";
                    details = "The value must be an expression or a numerical value. Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:\\s*((R(1[0-5]|[0-9])|LR|SP|PC)|((#|=)?)(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])')))|((#|=)?)(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,})))\\s+(EQU)(\\s+).*)")) {
                    matched = true;
                    message = "Invalid directive label.";
                    details = "Directive label cannot be an opcode or register. Press Ctrl+Space for more information.";
                }
            } else {
                matched = true;
                Pattern p = Pattern.compile("(?<=(?i:EQU)\\s{1,100})(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])')))");
                Matcher m = p.matcher(line);
                expressionSubString = "";
                found = false;
                while (m.find() && !found) {
                    expressionSubString = m.group(1).trim();
                    found = true;
                }
                try {
                    String label2 = SyntaxScanner.getLabelForLine(line);
                    Symbol s = new Symbol(label2, SyntaxScanner.solveExpression(lineNumber, expressionSubString, symbols, dcdWords, lineLabels), lineNumber);
                    symbols.add(s);
                    emulator.addSymbol(s);
                    if (label2.length() > maxLabelLength) {
                        maxLabelLength = label2.length();
                    }
                }
                catch (RuntimeError e) {
                    hasError = true;
                    message = e.getMessage();
                    details = e.getDetails();
                }
            }
        }
        if (!matched) {
            boolean bl30 = hasError = !line.matches(fill);
            if (hasError) {
                if (line.matches("(?i:\\s*((?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))\\s)?\\s*(FILL)(\\s+;.*|\\s*))")) {
                    matched = true;
                    message = "Missing number of bytes to zero-fill.";
                    details = "The FILL directive requires a multiple of 4 bytes to zero-fill as its operand. Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:\\s*((?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))\\s)?\\s*(FILL)(\\s+).*)")) {
                    matched = true;
                    message = "Invalid expression for number of bytes to fill.";
                    details = "The FILL directive requires a multiple of 4 bytes to zero-fill as its operand. Press Ctrl+Space for more information.";
                } else if (line.matches("(?i:.*\\s+(FILL)\\s+.*)")) {
                    matched = true;
                    message = "Invalid instruction format for FILL directive.";
                    details = "Press Ctrl+Space for more information.";
                }
            } else {
                matched = true;
                Pattern p = Pattern.compile("(?<=(?i:FILL)\\s{1,100})(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])')))");
                Matcher m = p.matcher(line);
                expressionSubString = "";
                found = false;
                while (m.find() && !found) {
                    expressionSubString = m.group(1).trim();
                    found = true;
                }
                try {
                    int bytesToFill = SyntaxScanner.solveExpression(lineNumber, expressionSubString, symbols, dcdWords, lineLabels);
                    if (bytesToFill % 4 != 0) {
                        hasError = true;
                        message = "Number of bytes to fill not multiple of 4.";
                        details = "The FILL directive requires a multiple of 4 bytes to zero-fill as its operand. Press Ctrl+Space for more information.";
                    } else {
                        ArrayList<Integer> zerosList = new ArrayList<Integer>();
                        for (int i = 0; i < bytesToFill / 4; ++i) {
                            zerosList.add(0);
                        }
                        String label3 = SyntaxScanner.getLabelForLine(line);
                        if (!label3.isEmpty()) {
                            if (label3.length() > maxLabelLength) {
                                maxLabelLength = label3.length();
                            }
                            w = new DcdWord(label3, zerosList, emulator.memory, lineNumber, false, deferSceneUpdates);
                            dcdWords.add(w);
                            emulator.addDcdWord(w);
                        } else {
                            emulator.memory.addWords(zerosList, true);
                        }
                    }
                }
                catch (RuntimeError e) {
                    hasError = true;
                    message = e.getMessage();
                    details = e.getDetails();
                }
            }
        }
        if (!matched) {
            boolean bl31 = hasError = !line.matches(endOfFile);
            if (!hasError) {
                matched = true;
                try {
                    instructions.add(SyntaxScanner.createInstructionForLine("", lineNumber, line, false, false));
                }
                catch (RuntimeError e) {
                    hasError = true;
                    message = e.getMessage();
                    details = e.getDetails();
                }
            }
        }
        if (!matched) {
            boolean bl32 = hasError = !line.matches(labelOnly) || SyntaxScanner.countTokenTypesForLine(line, 24) != 1;
            if (!hasError) {
                matched = true;
                try {
                    instructions.add(SyntaxScanner.createInstructionForLine("", lineNumber, line, false, false));
                }
                catch (RuntimeError e) {
                    hasError = true;
                    message = e.getMessage();
                    details = e.getDetails();
                }
            }
        }
        if (SyntaxScanner.checkConsecutiveTokenTypesForLine(line, 24)) {
            hasError = true;
            matched = true;
            message = "Multiple labels on the same line.";
            details = "Each line of code can only have up to one label.";
        }
        if (SyntaxScanner.countTokenTypesForLine(line, 6) > 1 && !SyntaxScanner.secondOpcodeIsShift(line)) {
            hasError = true;
            message = "Multiple opcodes on the same line.";
            details = "Each line of code can only have one opcode, with an optional second opcode within the flexible second operand.";
        }
        if (SyntaxScanner.countTokenTypesForLine(line, 8) > 1) {
            hasError = true;
            message = "Multiple directives on the same line.";
            details = "Each line of code can only have one directive.";
        }
        if (!matched) {
            message = !SyntaxScanner.hasUnsupportedOpcode(line) ? "This instruction is not a valid ARM UAL instruction." : "Unsupported instruction.";
            details = "Press F1 for a list of supported instructions.";
        } else if (!hasError) {
            String label4;
            message = "";
            details = "";
            if (!line.matches(dcd) && !line.matches(equ) && SyntaxScanner.firstTokenIsOfType(line, 24) && !(label4 = SyntaxScanner.getLabelForLine(line)).isEmpty()) {
                LineLabel.LineLabelConflict conflict = emulator.noLabelConflict(label4, lineNumber);
                switch (conflict) {
                    case LABEL: {
                        hasError = true;
                        message = "Redefinition of label '" + label4 + "'";
                        details = "Multiple lines cannot have the same label.";
                        break;
                    }
                    case CONSTANT: {
                        hasError = true;
                        message = "Redefinition of pre-processor constant '" + label4 + "' as a label.";
                        details = "A label cannot have the same name as a pre-processor constant.";
                        break;
                    }
                    case DIRECTIVE: {
                        hasError = true;
                        message = "Redefinition of word in memory '" + label4 + "' as a label.";
                        details = "A label cannot have the same name as a word in memory.";
                        break;
                    }
                    case NONE: {
                        LineLabel l = new LineLabel(label4, lineNumber, codeAddress);
                        codeAddress += 4;
                        lineLabels.add(l);
                        emulator.addLabel(l);
                        if (label4.length() <= maxLabelLength) break;
                        maxLabelLength = label4.length();
                        break;
                    }
                }
            }
        }
        if (hasError) {
            System.out.println("Syntax error: " + message);
        }
        return new SyntaxError(lineNumber, message, details);
    }

    public static List<Instruction> createEmulatorFile(String[] lineArray, Emulator emulator, List<SyntaxError> errors, boolean deferSceneUpdates) {
        ArrayList<Instruction> instructions = new ArrayList<Instruction>();
        ArrayList<Symbol> symbols = new ArrayList<Symbol>();
        ArrayList<DcdWord> dcdWords = new ArrayList<DcdWord>();
        ArrayList<LineLabel> lineLabels = new ArrayList<LineLabel>();
        maxLabelLength = 5;
        codeAddress = 0;
        for (int i = 0; i < lineArray.length; ++i) {
            SyntaxError error = SyntaxScanner.scanForErrors(i, lineArray[i], emulator, instructions, symbols, dcdWords, lineLabels, deferSceneUpdates);
            if (error.getMessage().isEmpty()) continue;
            errors.add(error);
        }
        return instructions;
    }

    public static int solveExpression(int lineNumber, String expression, List<Symbol> symbols, List<DcdWord> dcdWords, List<LineLabel> labels) throws RuntimeError {
        long result = 0L;
        char[] charArray = expression.toCharArray();
        ArrayList<String> literals = new ArrayList<String>();
        ArrayList<String> operators = new ArrayList<String>();
        for (int i = 0; i < charArray.length; ++i) {
            char c = charArray[i];
            String literal = "";
            while (c != '+' && c != '-' && c != '*') {
                literal = literal + c;
                if (i >= charArray.length - 1) break;
                c = charArray[++i];
            }
            if (i < charArray.length && !literal.trim().isEmpty()) {
                literals.add(literal.trim());
            }
            if (i >= charArray.length - 1) continue;
            operators.add("" + c);
        }
        if (operators.isEmpty()) {
            return SyntaxScanner.literalToInt(lineNumber, expression.trim(), symbols, dcdWords, labels);
        }
        result = SyntaxScanner.literalToInt(lineNumber, (String)literals.get(0), symbols, dcdWords, labels).intValue();
        int startOffset = 1;
        if (expression.trim().matches("(\\+|-).*")) {
            startOffset = 0;
            result = 0L;
        }
        block12: for (int i = 0; i < operators.size(); ++i) {
            switch ((String)operators.get(i)) {
                case "+": {
                    result += (long)SyntaxScanner.literalToInt(lineNumber, (String)literals.get(i + startOffset), symbols, dcdWords, labels).intValue();
                    continue block12;
                }
                case "-": {
                    result -= (long)SyntaxScanner.literalToInt(lineNumber, (String)literals.get(i + startOffset), symbols, dcdWords, labels).intValue();
                    continue block12;
                }
                case "*": {
                    result *= (long)SyntaxScanner.literalToInt(lineNumber, (String)literals.get(i + startOffset), symbols, dcdWords, labels).intValue();
                    continue block12;
                }
                default: {
                    throw new RuntimeError(lineNumber, "Unknown expression operator specified.", "The operator '" + (String)operators.get(i) + "' is not a valid operator for literal expressions." + " Supported operators are +, - and *");
                }
            }
        }
        return (int)result;
    }

    public static Integer literalToInt(int lineNumber, String literal, List<Symbol> symbols, List<DcdWord> dcdWords, List<LineLabel> lineLabels) throws RuntimeError {
        Integer result = null;
        if (literal.matches(hexLit32)) {
            int offset = literal.startsWith("&") ? 1 : 2;
            result = (int)Long.parseLong(literal.substring(offset), 16);
        } else if (literal.matches(binLit32)) {
            result = (int)Long.parseLong(literal.substring(2), 2);
        } else if (literal.matches(decLit)) {
            result = (int)Long.parseLong(literal);
        } else if (literal.matches(asciiLit)) {
            result = (int) (literal.length() == 3 ? literal.charAt(1) : literal.charAt(2));
        } else if (literal.matches(label)) {

            boolean found = false;
            for (Symbol s : symbols) {
                if (s == null) break;
                if (!s.getName().equals(literal)) continue;
                result = s.getValue();
                found = true;
                break;
            }
            if (!found) {
                DcdWord d;
                var iterator = dcdWords.iterator();
                while (iterator.hasNext() && (d = (DcdWord)iterator.next()) != null) {
                    if (!d.getName().equals(literal)) continue;
                    result = d.getAddress();
                    found = true;
                    break;
                }
            }
            if (!found) {
                LineLabel l;
                var iterator = lineLabels.iterator();
                while (iterator.hasNext() && (l = (LineLabel)iterator.next()) != null) {
                    if (!l.getId().equals(literal)) continue;
                    result = l.getAddress();
                    break;
                }
            }
        }
        if (result == null) {
            throw new RuntimeError(lineNumber, "Could not convert literal '" + literal.trim() + "' to a 32-bit integer.", "Check that the literal has been defined, or is a valid 32-bit integer.");
        }
        return result;
    }

    public static String getBaseOpcodeForString(String fullOpcode) {
        String baseOpcode = "";
        if ((fullOpcode = fullOpcode.toUpperCase()).matches("(ADD|ADC|SUB|SBC|RSB|RSC|MOV|MVN|ADR|EOR|BIC|AND|ORR|ORN|LSL|LSR|ASR|ROR|RRX|END|TST|TEQ|CMP|CMN)(S?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)")) {
            baseOpcode = fullOpcode.substring(0, 3);
        } else if (fullOpcode.matches("(LDRB|STRB)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)")) {
            baseOpcode = fullOpcode.substring(0, 4);
        } else if (fullOpcode.matches("(LDR|STR)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)")) {
            baseOpcode = fullOpcode.substring(0, 3);
        } else if (fullOpcode.matches("(LDM|STM)((FD|FA|ED|EA|IB|IA|DB|DA)?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)")) {
            baseOpcode = fullOpcode.substring(0, 3);
        } else if (fullOpcode.matches("(BL)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)")) {
            baseOpcode = fullOpcode.substring(0, 2);
        } else if (fullOpcode.matches("(B)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)")) {
            baseOpcode = fullOpcode.substring(0, 1);
        }
        return baseOpcode;
    }

    public static String getConditionCode(String fullOpcode) {
        String conditionCode = "";
        fullOpcode = fullOpcode.toUpperCase();
        int length = fullOpcode.length();
        if (fullOpcode.matches("(ADD|ADC|SUB|SBC|RSB|RSC|MOV|MVN|ADR|EOR|BIC|AND|ORR|ORN|LSL|LSR|ASR|ROR|RRX|END|TST|TEQ|CMP|CMN)(S?)(AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)")) {
            conditionCode = fullOpcode.substring(length - 2, length);
        } else if (fullOpcode.matches("(LDRB|STRB)(AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)")) {
            conditionCode = fullOpcode.substring(length - 2, length);
        } else if (fullOpcode.matches("(LDR|STR)(AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)")) {
            conditionCode = fullOpcode.substring(length - 2, length);
        } else if (fullOpcode.matches("(LDM|STM)((FD|FA|ED|EA|IB|IA|DB|DA)?)(AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)")) {
            conditionCode = fullOpcode.substring(length - 2, length);
        } else if (fullOpcode.matches("(BL)(AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)")) {
            conditionCode = fullOpcode.substring(length - 2, length);
        } else if (fullOpcode.matches("(B)(AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)")) {
            conditionCode = fullOpcode.substring(length - 2, length);
        }
        return conditionCode;
    }

    public static boolean isSet(String fullOpcode) {
        if ((fullOpcode = fullOpcode.toUpperCase()).matches("(ADD|ADC|SUB|SBC|RSB|RSC|MOV|MVN|ADR|EOR|BIC|AND|ORR|ORN|LSL|LSR|ASR|ROR|RRX|END)S((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)")) {
            return true;
        }
        if (fullOpcode.matches("(TST|TEQ|CMP|CMN)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)")) {
            return true;
        }
        if (fullOpcode.matches("(LDRB|STRB)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)")) {
            return false;
        }
        if (fullOpcode.matches("(LDR|STR)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)")) {
            return false;
        }
        if (fullOpcode.matches("(LDM|STM)((FD|FA|ED|EA|IB|IA|DB|DA)?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)")) {
            return false;
        }
        if (fullOpcode.matches("(BL)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)")) {
            return false;
        }
        if (fullOpcode.matches("(B)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)")) {
            return false;
        }
        return false;
    }

    public static int getBaseCycleCountForOpcode(String fullOpcode) {
        if ((fullOpcode = fullOpcode.toUpperCase()).matches("(ADD|ADC|SUB|SBC|RSB|RSC|MOV|MVN|ADR|EOR|BIC|AND|ORR|ORN|LSL|LSR|ASR|ROR|RRX|END|TST|TEQ|CMP|CMN)(S?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)")) {
            return 1;
        }
        if (fullOpcode.matches("(LDRB|STRB)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)")) {
            return 4;
        }
        if (fullOpcode.matches("(LDR|STR)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)")) {
            return 4;
        }
        if (fullOpcode.matches("(LDM|STM)((FD|FA|ED|EA|IB|IA|DB|DA)?)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)")) {
            return 4;
        }
        if (fullOpcode.matches("(BL)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)")) {
            return 4;
        }
        if (fullOpcode.matches("(B)((AL|NE|EQ|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE)?)")) {
            return 4;
        }
        return 0;
    }

    public static boolean isShiftable(int value, SubstitutionType subType) {
        int i;
        int i2;
        String binaryString = Integer.toBinaryString(value);
        int startPosition = binaryString.indexOf("1");
        if (startPosition == -1) {
            return true;
        }
        int endPosition = startPosition + 8 < binaryString.length() ? startPosition + 8 : binaryString.length();
        String halfWordString = binaryString.substring(startPosition, endPosition);
        int truncated = Integer.parseInt(halfWordString, 2);
        for (i2 = 0; i2 < 32; i2 += 2) {
            int rotated = truncated >>> i2 | truncated << 32 - i2;
            if (!Integer.toHexString(rotated).equals(Integer.toHexString(value))) continue;
            return true;
        }
        for (i2 = 0; i2 < 8; i2 += 2) {
            halfWordString = "0" + halfWordString;
            halfWordString = halfWordString.substring(0, 8);
            int halfWordValue = Integer.parseInt(halfWordString, 2);
            for (int j = 0; j < 32; j += 2) {
                int rotated = halfWordValue >>> j | halfWordValue << 32 - j;
                if (!Integer.toHexString(rotated).equals(Integer.toHexString(value))) continue;
                return true;
            }
        }
        int padding = 32 - binaryString.length();
        for (i = 0; i < padding; ++i) {
            binaryString = "0" + binaryString;
        }
        for (i = 1; i < 8; ++i) {
            String newString = binaryString.substring(31 - (7 - i), 32) + binaryString.substring(0, i);
            int newValue = Integer.parseInt(newString, 2);
            for (int j = 0; j < 32; j += 2) {
                int rotated = newValue >>> j | newValue << 32 - j;
                if (!Integer.toHexString(rotated).equals(Integer.toHexString(value))) continue;
                return true;
            }
        }
        switch (subType) {
            default: {
                return false;
            }
            case INVERT: {
                return SyntaxScanner.isShiftable(~value, SubstitutionType.NONE);
            }
            case NEGATE: 
        }
        return SyntaxScanner.isShiftable(-value, SubstitutionType.NONE);
    }

    private static int getImmediateForLine(String line) {
        ArmV7TokenMaker tokenMaker = new ArmV7TokenMaker();
        Segment segment = new Segment(line.toCharArray(), 0, line.length());
        String immediateString = "0";
        Token t = tokenMaker.getTokenList(segment, 0, line.length());
        while (t.getType() != 0) {
            if (t.getType() == 10) {
                immediateString = t.getLexeme();
                break;
            }
            t = t.getNextToken();
        }
        if (immediateString.startsWith("0x")) {
            return (int)Long.parseLong(immediateString.substring(2), 16);
        }
        if (immediateString.startsWith("&")) {
            return (int)Long.parseLong(immediateString.substring(1), 16);
        }
        if (immediateString.startsWith("0b")) {
            return (int)Long.parseLong(immediateString.substring(2), 2);
        }
        return (int)Long.parseLong(immediateString);
    }

    private static String getExpressionForLine(String line) {
        Pattern p = Pattern.compile("(?<=(#|=))(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])')))");
        Matcher m = p.matcher(line);
        String expressionSubString = "";
        boolean found = false;
        while (m.find() && !found) {
            expressionSubString = m.group().trim();
            found = true;
        }
        return expressionSubString;
    }

    private static List<Integer> getRegNamesForLine(String line) {
        ArrayList<Integer> regNames = new ArrayList<Integer>();
        ArmV7TokenMaker tokenMaker = new ArmV7TokenMaker();
        Segment segment = new Segment(line.toCharArray(), 0, line.length());
        Token t = tokenMaker.getTokenList(segment, 0, line.length());
        while (t.getType() != 0) {
            if (t.getType() == 17) {
                String lexeme = t.getLexeme();
                regNames.add(SyntaxScanner.getRegNumber(lexeme));
            } else if (t.getType() == 20 && t.getLexeme().equals("{")) {
                Pattern p = Pattern.compile("(?<=(,\\s{0,100}\\{)\\s{0,100})(?i:((((R(1[0-5]|[0-9])|LR|SP|PC)(\\s*-\\s*)(R(1[0-5]|[0-9])|LR|SP|PC)(\\s*,\\s*))+(((R(1[0-5]|[0-9])|LR|SP|PC)(\\s*-\\s*)(R(1[0-5]|[0-9])|LR|SP|PC))|(R(1[0-5]|[0-9])|LR|SP|PC)))|(((R(1[0-5]|[0-9])|LR|SP|PC)(\\s*,\\s*))+(((R(1[0-5]|[0-9])|LR|SP|PC)(\\s*-\\s*)(R(1[0-5]|[0-9])|LR|SP|PC))|(R(1[0-5]|[0-9])|LR|SP|PC)))|((R(1[0-5]|[0-9])|LR|SP|PC)(\\s*-\\s*)(R(1[0-5]|[0-9])|LR|SP|PC))|((R(1[0-5]|[0-9])|LR|SP|PC)))(((\\s*,\\s*)((R(1[0-5]|[0-9])|LR|SP|PC)(\\s*-\\s*)(R(1[0-5]|[0-9])|LR|SP|PC))|(\\s*,\\s*)((R(1[0-5]|[0-9])|LR|SP|PC)))*))");
                Matcher m = p.matcher(line);
                String regListSubString = "";
                boolean found = false;
                while (m.find() && !found) {
                    regListSubString = m.group();
                    found = true;
                }
                int toSkip = regListSubString.length();
                for (int skipCount = 0; skipCount < toSkip && t.getType() != 0; skipCount += t.getLexeme().length()) {
                    t = t.getNextToken();
                }
                String[] regList = regListSubString.trim().split(comma);
                for (int i = 0; i < regList.length; ++i) {
                    regList[i] = regList[i].trim();
                    if (regList[i].isEmpty()) continue;
                    if (!regList[i].contains("-")) {
                        regNames.add(SyntaxScanner.getRegNumber(regList[i]));
                        continue;
                    }
                    int startReg = SyntaxScanner.getRegNumber(regList[i].split("\\s*-\\s*")[0]);
                    int endReg = SyntaxScanner.getRegNumber(regList[i].split("\\s*-\\s*")[1]);
                    for (int j = startReg; j <= endReg; ++j) {
                        regNames.add(j);
                    }
                }
            }
            t = t.getNextToken();
        }
        return regNames;
    }

    private static int getRegNumber(String name) {
        if (name.toUpperCase().endsWith("PC")) {
            return 15;
        }
        if (name.toUpperCase().endsWith("LR")) {
            return 14;
        }
        if (name.toUpperCase().endsWith("SP")) {
            return 13;
        }
        int offset = name.startsWith("+") || name.startsWith("-") ? 2 : 1;
        return Integer.parseInt(name.substring(offset));
    }

    private static String getLabelForLine(String line) {
        ArmV7TokenMaker tokenMaker = new ArmV7TokenMaker();
        Segment segment = new Segment(line.toCharArray(), 0, line.length());
        String label = "";
        Token t = tokenMaker.getTokenList(segment, 0, line.length());
        while (t.getType() != 0) {
            if (t.getType() == 24) {
                label = t.getLexeme();
                break;
            }
            t = t.getNextToken();
        }
        return label;
    }

    private static int countTokenTypesForLine(String line, int type) {
        ArmV7TokenMaker tokenMaker = new ArmV7TokenMaker();
        Segment segment = new Segment(line.toCharArray(), 0, line.length());
        Token t = tokenMaker.getTokenList(segment, 0, line.length());
        int count = 0;
        while (t.getType() != 0) {
            if (t.getType() == type) {
                ++count;
            } else if (t.getType() == 4) break;
            t = t.getNextToken();
        }
        return count;
    }

    private static boolean firstTokenIsOfType(String line, int type) {
        ArmV7TokenMaker tokenMaker = new ArmV7TokenMaker();
        Segment segment = new Segment(line.toCharArray(), 0, line.length());
        Token t = tokenMaker.getTokenList(segment, 0, line.length());
        while (t.getType() != 0) {
            if (t.getType() == type) {
                return true;
            }
            if (t.getType() != 21) {
                return false;
            }
            t = t.getNextToken();
        }
        return false;
    }

    private static Instruction createInstructionForLine(String pseudoOpcodeReplacement, int lineNumber, String line, boolean preIndexed, boolean postIndexed) throws RuntimeError {
        ArmV7TokenMaker tokenMaker = new ArmV7TokenMaker();
        Segment segment = new Segment(line.toCharArray(), 0, line.length());
        Token t = tokenMaker.getTokenList(segment, 0, line.length());
        ArrayList<Argument> args = new ArrayList<Argument>();
        String opcode = "";
        String opcode2 = "";
        boolean adrExpression = false;
        while (t.getType() != 0) {
            int skipCount;
            int toSkip;
            boolean found;
            String expressionSubString;
            Matcher m;
            Pattern p;
            String lexeme = t.getLexeme();
            int type = t.getType();
            if (adrExpression && args.size() > 0) {
                adrExpression = false;
                p = Pattern.compile("(?<=(,\\s{0,100}))(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])')))");
                m = p.matcher(line);
                expressionSubString = "";
                found = false;
                while (m.find() && !found) {
                    expressionSubString = m.group();
                    found = true;
                }
                toSkip = expressionSubString.length();
                for (skipCount = 0; skipCount < toSkip && t.getType() != 0; skipCount += t.getLexeme().length()) {
                    t = t.getNextToken();
                }
                args.add(new Argument(ArgType.EXP, expressionSubString));
            }
            if (type == 6 && opcode.isEmpty()) {
                opcode = lexeme.toUpperCase();
                if (SyntaxScanner.getBaseOpcodeForString(opcode).matches("(?i:(B|BL))")) {
                    String subLexeme;
                    String expressionSubString2 = "";
                    t = t.getNextToken();
                    while (t.getType() != 0 && !(subLexeme = t.getLexeme()).contains(";")) {
                        expressionSubString2 = expressionSubString2 + subLexeme;
                        t = t.getNextToken();
                    }
                    args.add(new Argument(ArgType.EXP, expressionSubString2.trim()));
                    break;
                }
                if (SyntaxScanner.getBaseOpcodeForString(opcode).matches("(?i:(ADR))")) {
                    adrExpression = true;
                }
            } else if (type == 6) {
                opcode2 = lexeme.toUpperCase();
            } else if (type == 17) {
                ArgType regType = ArgType.REG;
                switch (lexeme.charAt(0)) {
                    case '+': {
                        regType = ArgType.REG_POS;
                        break;
                    }
                    case '-': {
                        regType = ArgType.REG_NEG;
                        break;
                    }
                }
                args.add(new Argument(regType, SyntaxScanner.getRegNumber(lexeme)));
            } else if (type == 23) {
                p = Pattern.compile("(?<=(#|=))(((\\s*\\+\\s*)|(\\s*-\\s*))?(((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])'))((\\s*\\+\\s*)|(\\s*-\\s*)|(\\s*\\*\\s*)))*((?i:(0x|&)[A-F0-9]{1,8})|(?i:0b[0-1]{1,32})|([0-9]+)|(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))|('(\\\\'|[ -&]|[(-~])')))");
                m = p.matcher(line);
                expressionSubString = "";
                found = false;
                while (m.find() && !found) {
                    expressionSubString = m.group();
                    found = true;
                }
                toSkip = expressionSubString.length();
                for (skipCount = 0; skipCount < toSkip && t.getType() != 0; skipCount += t.getLexeme().length()) {
                    t = t.getNextToken();
                }
                if (pseudoOpcodeReplacement.isEmpty() && !opcode.toLowerCase().startsWith("ldr") && !opcode.toLowerCase().startsWith("str")) {
                    SubstitutionType subType = SyntaxScanner.getBaseOpcodeForString(opcode).matches("(?i:(MOV|MVN|AND|BIC))") ? SubstitutionType.INVERT : (SyntaxScanner.getBaseOpcodeForString(opcode).matches("(?i:(ADD|ADC|SUB|SBC|CMP|CMN))") ? SubstitutionType.NEGATE : SubstitutionType.NONE);
                    if (SyntaxScanner.getBaseOpcodeForString(opcode).matches("(?i:(LSL|LSR|ASR|ROR|RRX))")) {
                        args.add(new Argument(ArgType.EXP, expressionSubString, SubstitutionType.IGNORE, 255));
                    } else {
                        args.add(new Argument(ArgType.EXP, expressionSubString, subType));
                    }
                } else {
                    args.add(new Argument(ArgType.EXP, expressionSubString));
                }
            } else if (type == 20 && lexeme.equals("{")) {
                p = Pattern.compile("(?<=(,\\s{0,100}\\{)\\s{0,100})(?i:((((R(1[0-5]|[0-9])|LR|SP|PC)(\\s*-\\s*)(R(1[0-5]|[0-9])|LR|SP|PC)(\\s*,\\s*))+(((R(1[0-5]|[0-9])|LR|SP|PC)(\\s*-\\s*)(R(1[0-5]|[0-9])|LR|SP|PC))|(R(1[0-5]|[0-9])|LR|SP|PC)))|(((R(1[0-5]|[0-9])|LR|SP|PC)(\\s*,\\s*))+(((R(1[0-5]|[0-9])|LR|SP|PC)(\\s*-\\s*)(R(1[0-5]|[0-9])|LR|SP|PC))|(R(1[0-5]|[0-9])|LR|SP|PC)))|((R(1[0-5]|[0-9])|LR|SP|PC)(\\s*-\\s*)(R(1[0-5]|[0-9])|LR|SP|PC))|((R(1[0-5]|[0-9])|LR|SP|PC)))(((\\s*,\\s*)((R(1[0-5]|[0-9])|LR|SP|PC)(\\s*-\\s*)(R(1[0-5]|[0-9])|LR|SP|PC))|(\\s*,\\s*)((R(1[0-5]|[0-9])|LR|SP|PC)))*))");
                m = p.matcher(line);
                String regListSubString = "";
                found = false;
                while (m.find() && !found) {
                    regListSubString = m.group();
                    found = true;
                }
                toSkip = regListSubString.length();
                for (skipCount = 0; skipCount < toSkip && t.getType() != 0; skipCount += t.getLexeme().length()) {
                    t = t.getNextToken();
                }
                String[] regList = regListSubString.trim().split(comma);
                for (int i = 0; i < regList.length; ++i) {
                    regList[i] = regList[i].trim();
                    if (regList[i].isEmpty()) continue;
                    if (!regList[i].contains("-")) {
                        args.add(new Argument(ArgType.REG, SyntaxScanner.getRegNumber(regList[i])));
                        continue;
                    }
                    int startReg = SyntaxScanner.getRegNumber(regList[i].split("\\s*-\\s*")[0]);
                    int endReg = SyntaxScanner.getRegNumber(regList[i].split("\\s*-\\s*")[1]);
                    for (int j = startReg; j <= endReg; ++j) {
                        args.add(new Argument(ArgType.REG, j));
                    }
                }
            }
            t = t.getNextToken();
        }
        if (!pseudoOpcodeReplacement.isEmpty()) {
            opcode = pseudoOpcodeReplacement + opcode.substring(pseudoOpcodeReplacement.length());
        }
        Instruction i = opcode2.isEmpty() ? new Instruction(lineNumber, codeAddress, opcode, args) : new Instruction(lineNumber, codeAddress, opcode, opcode2, args);
        if (!SyntaxScanner.firstTokenIsOfType(line, 24)) {
            codeAddress += 4;
        }
        i.setPreIndex(preIndexed);
        i.setPostIndex(postIndexed);
        return i;
    }

    private static boolean checkConsecutiveTokenTypesForLine(String line, int type) {
        ArmV7TokenMaker tokenMaker = new ArmV7TokenMaker();
        Segment segment = new Segment(line.toCharArray(), 0, line.length());
        Token t = tokenMaker.getTokenList(segment, 0, line.length());
        boolean first = t.getType() == type;
        t = t.getNextToken();
        while (t.getType() != 0) {
            if (t.getType() == type && first) {
                return true;
            }
            if (t.getType() != 21) {
                first = t.getType() == type;
            }
            t = t.getNextToken();
        }
        return false;
    }

    private static boolean secondOpcodeIsShift(String line) {
        ArmV7TokenMaker tokenMaker = new ArmV7TokenMaker();
        Segment segment = new Segment(line.toCharArray(), 0, line.length());
        Token t = tokenMaker.getTokenList(segment, 0, line.length());
        boolean foundFirstShift = false;
        int opcodeCount = 0;
        while (t.getType() != 0) {
            if (t.getType() == 6) {
                ++opcodeCount;
                if (t.getLexeme().matches("(?i:(ASR|LSL|LSR|ROR|RRX).*)")) {
                    if (!foundFirstShift) {
                        foundFirstShift = true;
                    } else {
                        return false;
                    }
                }
            }
            if (opcodeCount > 2) {
                return false;
            }
            t = t.getNextToken();
        }
        return foundFirstShift;
    }

    private static boolean hasUnsupportedOpcode(String line) {
        return line.matches("(?i:.*(ADDW|BFC|BFI|BKPT|BLX|BX|CBNZ|CBZ|CLREX|CLZ|CPSID|CPSIE|DMB|DSB|ISB|IT|LDRD|LDREX|LDREXB|LDREXH|LDRH|LDRHT|LDRSH|LDRSH|LDRSHT|LDRT|MLA|MLS|MOVT|MOVW|MRS|MSR|MUL|MULS|NOP|POP|PUSH|RBIT|REV|REV16|REVSH|SBFX|SDIV|SEV|SMLAL|SMULL|SSAT|STRB|STRBT|STREX|STREXB|STREXB|STREXH|STRH|STRHT|STRT|SUBW|SVC|SXTB|SXTH|TBB|TBH|UBFX|UDIV|UMLAL|UMULL|USAT|UXTB|UXTH|WFE|WFI)\\s+.*)");
    }

    public static String autoIndentCode(String[] lineArray) {
        int i;
        maxLabelLength = 5;
        for (int i2 = 0; i2 < lineArray.length; ++i2) {
            String label = SyntaxScanner.getLabelForLine(lineArray[i2]);
            if (label.length() <= maxLabelLength || !SyntaxScanner.firstTokenIsOfType(lineArray[i2], 24)) continue;
            maxLabelLength = label.length();
        }
        String indented = "";
        int noLabelTabCount = maxLabelLength / 5 + 1;
        if (noLabelTabCount == 0) {
            noLabelTabCount = 1;
        }
        String noLabelTabString = "";
        for (i = 0; i < noLabelTabCount; ++i) {
            noLabelTabString = noLabelTabString + "\t";
        }
        for (i = 0; i < lineArray.length; ++i) {
            if (lineArray[i].matches(labelOnly) && SyntaxScanner.firstTokenIsOfType(lineArray[i], 24)) {
                indented = indented + lineArray[i].trim() + "\n";
                continue;
            }
            if (lineArray[i].matches("((\\s*(?i:(((R[0-9])|PC|LR|SP)[A-Z_]{1,}[A-Z0-9_]{1,})|(((R1[0-5]))[A-Z_]{1,}[A-Z0-9_]{1,})|([A-Z_]{1,}[A-Z0-9_]{3,})|((?!((R[0-9])|PC|LR|SP))[A-Z_]{1,}[A-Z0-9_]{1,}))?\\s+)?).*(\\s+;.*|\\s*)")) {
                if (SyntaxScanner.firstTokenIsOfType(lineArray[i], 24)) {
                    String[] splitString = lineArray[i].trim().split("\\s+", 3);
                    String labelString = splitString[0];
                    String opcodeString = splitString[1];
                    String contentString = "";
                    boolean noContent = false;
                    try {
                        contentString = splitString[2];
                    }
                    catch (IndexOutOfBoundsException e) {
                        noContent = true;
                    }
                    int nearestMultiple = labelString.length() / 5;
                    int tabCount = 0;
                    int requiredSpacing = noLabelTabCount * 5;
                    int actualSpacing = nearestMultiple * 5 + labelString.length() % 5 + tabCount * 5;
                    while (actualSpacing < requiredSpacing) {
                        actualSpacing = nearestMultiple * 5 + labelString.length() % 5 + ++tabCount * 5;
                    }
                    String tabString = "";
                    for (int j = 0; j < tabCount; ++j) {
                        tabString = tabString + "\t";
                    }
                    String opcodeTabString = !noContent ? (opcodeString.length() < 5 ? "\t\t" : "\t") : "";
                    indented = indented + labelString + tabString + opcodeString + opcodeTabString + contentString + "\n";
                    continue;
                }
                String opcodeString = lineArray[i].trim().split("\\s+")[0];
                String contentString = lineArray[i].trim().substring(opcodeString.length());
                String opcodeTabString = !contentString.isEmpty() ? (opcodeString.trim().length() < 5 ? "\t\t" : "\t") : "";
                indented = indented + noLabelTabString + opcodeString.trim() + opcodeTabString + contentString.trim() + "\n";
                continue;
            }
            indented = indented + lineArray[i].trim() + "\n";
        }
        return indented;
    }

    public static enum SubstitutionType {
        NONE,
        INVERT,
        NEGATE,
        IGNORE;

    }
}

