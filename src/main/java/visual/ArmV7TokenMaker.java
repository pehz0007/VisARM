/*
 * Decompiled with CFR 0.152.
 */
package visual;

import java.io.IOException;
import java.io.Reader;
import javax.swing.text.Segment;
import org.fife.ui.rsyntaxtextarea.AbstractJFlexTokenMaker;
import org.fife.ui.rsyntaxtextarea.Token;
import org.fife.ui.rsyntaxtextarea.TokenImpl;

public class ArmV7TokenMaker extends AbstractJFlexTokenMaker {

    /** This character denotes the end of file. */
    public static final int YYEOF = -1;

    /** Initial size of the lookahead buffer. */
    private static final int ZZ_BUFFERSIZE = 16384;

    // Lexical states.
    public static final int YYINITIAL = 0;
    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     *                  at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int[] ZZ_LEXSTATE = new int[]{0, 1};

    private static final String ZZ_CMAP_PACKED = "\t\u0000\u0001\r\u0001\u0010\u0001*\u0001+\u0001*\u0012\u0000\u0001\u0011\u0001\u000e\u0001\u0006\u0001\u0012\u0001\u0006\u0001,\u0001\f\u0001\b\u0002\u0006\u0001\u0014\u0001\u0013\u0001\u000e\u0001\u0013\u0002\u000e\u0001\t\u0001\u0004\u0001\u0016\u0001\u0016\u0001\u0016\u0001\u0016\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0006\u0001\u000f\u0001\u0006\u0001\u0012\u0003\u0006\u0001\u0003\u0001\n\u0001\u001b\u0001\u001f\u0001\u001c\u0001 \u0001(\u0001'\u0001\"\u0002\u0001\u0001\u001a\u0001$\u0001#\u0001%\u0001\u0019\u0001\u001d\u0001\u0015\u0001\u0018\u0001)\u0001\u001e\u0001&\u0001\u0001\u0001\u000b\u0002\u0001\u0001\u000e\u0001\u0007\u0001\u000e\u0001\u0006\u0001\u0001\u0001\u0006\u0001\u0003\u0001\n\u0001\u001b\u0001\u001f\u0001\u001c\u0001 \u0001(\u0001'\u0001\"\u0002\u0001\u0001\u001a\u0001$\u0001#\u0001%\u0001\u0019\u0001\u001d\u0001\u0015\u0001\u0018\u0001)\u0001\u001e\u0001&\u0001\u0001\u0001\u000b\u0002\u0001\u0001\u000e\u0001\u0002\u0001\u000e\u0001\u0006\u0006\u0000\u0001*\u00aa\u0000\u0002!M\u0000\u0001\u0017\u1ea8\u0000\u0001*\u0001*\uffff\u0000\uffff\u0000\uffff\u0000\uffff\u0000\uffff\u0000\uffff\u0000\uffff\u0000\uffff\u0000\uffff\u0000\uffff\u0000\uffff\u0000\uffff\u0000\uffff\u0000\uffff\u0000\uffff\u0000\uffff\u0000\udfe6\u0000";
    private static final char[] ZZ_CMAP = ArmV7TokenMaker.zzUnpackCMap("\t\u0000\u0001\r\u0001\u0010\u0001*\u0001+\u0001*\u0012\u0000\u0001\u0011\u0001\u000e\u0001\u0006\u0001\u0012\u0001\u0006\u0001,\u0001\f\u0001\b\u0002\u0006\u0001\u0014\u0001\u0013\u0001\u000e\u0001\u0013\u0002\u000e\u0001\t\u0001\u0004\u0001\u0016\u0001\u0016\u0001\u0016\u0001\u0016\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0006\u0001\u000f\u0001\u0006\u0001\u0012\u0003\u0006\u0001\u0003\u0001\n\u0001\u001b\u0001\u001f\u0001\u001c\u0001 \u0001(\u0001'\u0001\"\u0002\u0001\u0001\u001a\u0001$\u0001#\u0001%\u0001\u0019\u0001\u001d\u0001\u0015\u0001\u0018\u0001)\u0001\u001e\u0001&\u0001\u0001\u0001\u000b\u0002\u0001\u0001\u000e\u0001\u0007\u0001\u000e\u0001\u0006\u0001\u0001\u0001\u0006\u0001\u0003\u0001\n\u0001\u001b\u0001\u001f\u0001\u001c\u0001 \u0001(\u0001'\u0001\"\u0002\u0001\u0001\u001a\u0001$\u0001#\u0001%\u0001\u0019\u0001\u001d\u0001\u0015\u0001\u0018\u0001)\u0001\u001e\u0001&\u0001\u0001\u0001\u000b\u0002\u0001\u0001\u000e\u0001\u0002\u0001\u000e\u0001\u0006\u0006\u0000\u0001*\u00aa\u0000\u0002!M\u0000\u0001\u0017\u1ea8\u0000\u0001*\u0001*\uffff\u0000\uffff\u0000\uffff\u0000\uffff\u0000\uffff\u0000\uffff\u0000\uffff\u0000\uffff\u0000\uffff\u0000\uffff\u0000\uffff\u0000\uffff\u0000\uffff\u0000\uffff\u0000\uffff\u0000\uffff\u0000\udfe6\u0000");
    private static final int[] ZZ_ACTION = ArmV7TokenMaker.zzUnpackAction();
    private static final String ZZ_ACTION_PACKED_0 = "\u0002\u0000\u0001\u0001\u0002\u0002\u0001\u0003\u0001\u0001\u0001\u0003\u0001\u0004\u0001\u0001\u0001\u0005\u0001\u0006\u0001\u0007\u0002\b\u0001\u0002\u0001\u0001\n\u0002\u0001\t\u0002\u0001\u0003\u0002\u0002\u0000\u0002\u0001\u0001\u0002\u0004\u0004\u0002\u0002\u0001\u0001\u0005\u0002\u0001\u0003\u0004\u0000\u0002\n\u0001\u0002\u0001\u0001\u0001\u0002\u0001\u0000\u0001\n\u0002\u0000\u0002\u0002\u0001\u0001\u0005\u0002\u0001\u0001\u0004\u0002\u0001\u0001\u0002\u0002\u0001\u0004\u0004\u0003\u0001\u0004\u0001\u0002\b\u0001\u0002\u0004\u0001\n\u0002\u0004\u0001\u0000\u0001\u0004\u0001\u0002\u0001\t\u0001\u0001\u0001\u0002\u0001\u0000\u0001\u0004\t\u0000\u0002\u0002\u0001\u0001\u0001\t\u0001\u0004";
    private static final int[] ZZ_ROWMAP = ArmV7TokenMaker.zzUnpackRowMap();
    private static final String ZZ_ROWMAP_PACKED_0 = "\u0000\u0000\u0000-\u0000Z\u0000\u0087\u0000\u00b4\u0000\u00e1\u0000\u010e\u0000\u013b\u0000\u0168\u0000\u0195\u0000\u01c2\u0000\u01ef\u0000Z\u0000Z\u0000\u021c\u0000\u0249\u0000\u0276\u0000\u02a3\u0000\u02d0\u0000\u02fd\u0000\u032a\u0000\u0357\u0000\u0384\u0000\u03b1\u0000\u03de\u0000\u040b\u0000\u0438\u0000\u0465\u0000\u0492\u0000\u04bf\u0000\u04ec\u0000\u0519\u0000\u0546\u0000\u0573\u0000\u05a0\u0000\u05cd\u0000\u05fa\u0000\u0627\u0000\u0654\u0000\u0681\u0000\u06ae\u0000\u06db\u0000\u0708\u0000\u0735\u0000\u0762\u0000\u078f\u0000\u07bc\u0000\u07e9\u0000\u0816\u0000\u0843\u0000\u0195\u0000\u0870\u0000\u089d\u0000\u08ca\u0000\u08f7\u0000\u0924\u0000\u0087\u0000\u0951\u0000\u097e\u0000\u09ab\u0000\u09d8\u0000Z\u0000\u0a05\u0000\u0a32\u0000\u0a5f\u0000\u0a8c\u0000\u0ab9\u0000\u0ae6\u0000\u0b13\u0000\u0b40\u0000\u0b6d\u0000\u0b9a\u0000\u0bc7\u0000\u0bf4\u0000\u0c21\u0000\u0c4e\u0000\u0c7b\u0000\u0ca8\u0000\u0cd5\u0000\u0d02\u0000\u0d2f\u0000Z\u0000\u0573\u0000\u05cd\u0000\u05fa\u0000\u0087\u0000\u0d5c\u0000\u0d89\u0000\u0db6\u0000\u0de3\u0000\u0e10\u0000\u0e3d\u0000\u0e6a\u0000\u0e97\u0000\u0ec4\u0000\u0735\u0000\u0492\u0000\u0ef1\u0000\u0f1e\u0000\u0f4b\u0000\u0f78\u0000\u0fa5\u0000\u0fd2\u0000\u0087\u0000\u0fff\u0000\u102c\u0000\u1059\u0000\u1086\u0000\u10b3\u0000\u10e0\u0000\u110d\u0000\u113a\u0000\u1167\u0000\u1194\u0000\u11c1\u0000\u11ee\u0000\u121b\u0000\u1248\u0000\u1275\u0000\u12a2\u0000\u0492\u0000Z";
    private static final int[] ZZ_TRANS = ArmV7TokenMaker.zzUnpackTrans();
    private static final String ZZ_TRANS_PACKED_0 = "\u0001\u0003\u0001\u0004\u0001\u0003\u0001\u0005\u0002\u0006\u0002\u0003\u0001\u0007\u0001\b\u0001\t\u0001\u0004\u0001\n\u0001\u000b\u0001\u0003\u0001\f\u0001\r\u0001\u000b\u0001\u000e\u0001\u000f\u0001\u000e\u0001\u0010\u0001\u0006\u0001\u0011\u0001\u0012\u0001\u0013\u0001\u0014\u0001\u0015\u0001\u0016\u0002\u0004\u0001\u0017\u0001\u0018\u0001\u0003\u0002\u0004\u0001\u0019\u0001\u001a\u0003\u0004\u0001\u001b\u0001\u0000\u0001\u000b\u0002\u0003\u0001\u0004\u0001\u0003\u0001\u0005\u0002\u0006\u0002\u0003\u0001\u0007\u0001\b\u0001\t\u0001\u0004\u0001\n\u0001\u000b\u0001\u0003\u0001\f\u0001\r\u0001\u000b\u0001\u000e\u0001\u000f\u0001\u000e\u0001\u0010\u0001\u0006\u0001\u0011\u0001\u0012\u0001\u0013\u0001\u0014\u0001\u0015\u0001\u0016\u0002\u0004\u0001\u0017\u0001\u0018\u0001\u0003\u0002\u0004\u0001\u0019\u0001\u001a\u0003\u0004\u0001\u001b\u0001\u0000\u0001\u000b\u0001\u001c-\u0000\u0001\u001d\u0001\u0004\u0001\u001d\u0003\u0004\u0003\u001d\u0003\u0004\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0002\u0004\u0001\u001d\t\u0004\u0001\u001d\b\u0004\u0001\u001d\u0002\u0000\u0001\u001d\u0001\u0004\u0001\u001d\u0003\u0004\u0003\u001d\u0003\u0004\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0002\u0004\u0001\u001e\u0001\u001f\u0006\u0004\u0001 \u0001\u0004\u0001\u001d\u0001\u0004\u0001!\u0006\u0004\u0001\u001d\u0002\u0000\u0004\u001d\u0002\u0006\u0003\u001d\u0001\u0006\u0003\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0001\u001d\u0001\u0006\u0014\u001d\u0003\u0000\u0006\"\u0001#\u0001\u0000\u0004\"\u0001\u0000\u0002\"\u0001\u0000\u0006\"\u0001\u0000\t\"\u0001\u0000\b\"\u0002\u0000\u0001\"\u0004\u001d\u0002\u0006\u0003\u001d\u0001\u0006\u0001$\u0001%\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0001\u001d\u0001\u0006\u0014\u001d\u0002\u0000\u0001\u001d\u0001\u0004\u0001\u001d\u0001&\u0002\u0004\u0003\u001d\u0002\u0004\u0001'\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0002\u0004\u0001(\u0001)\u0001&\u0001*\u0001+\u0001,\u0004\u0004\u0001-\u0001.\u0001/\u00010\u0001\u0004\u0001+\u00011\u00012\u0001\u0004\u0001\u001d\u0004\u0000\u00043\u0003\u0000\u00023\u000b\u0000\u00013\u0004\u0000\u00023\u0002\u0000\u00023\u0019\u0000\u0001\u000b\u0003\u0000\u0001\u000b\u0019\u0000\u0001\u000b\u0001\u0000\u0010\f\u0001\u0000\u0019\f\u0002\u0000\u0001\f\u0015\u0000\u00014\u0001\u0000\u00025\u00016\u00017\u0012\u0000\u0001\u001d\u0001\u0004\u0001\u001d\u0001\u0004\u00018\u00019\u0003\u001d\u00019\u0002\u0004\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0001:\u00019\u0001;\u0001<\b\u0004\u0001\u001d\u0003\u0004\u0001\u001f\u0004\u0004\u0001\u001d\f\u0000\u0001=\u000e\u0000\u0001>\u0004\u0000\u0001?\n\u0000\u0001@\u0003\u0000\u0001\u001d\u0001\u0004\u0001\u001d\u0003\u0004\u0003\u001d\u0001\u0004\u0001.\u0001\u0004\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0002\u0004\u0001\u001d\u0001\u0004\u00019\u0004\u0004\u0001A\u0002\u0004\u0001\u001d\u0007\u0004\u0001B\u0001\u001d\u0002\u0000\u0001\u001d\u0001\u0004\u0001\u001d\u0003\u0004\u0003\u001d\u0003\u0004\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0002\u0004\u0001\u001d\u0003\u0004\u00019\u0005\u0004\u0001\u001d\b\u0004\u0001\u001d\u0002\u0000\u0001\u001d\u0001\u0004\u0001\u001d\u0003\u0004\u0003\u001d\u0003\u0004\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u00019\u0001\u0004\u0001C\u0001D\u0006\u0004\u0001B\u0001\u0004\u0001\u001d\b\u0004\u0001\u001d\u0002\u0000\u0001\u001d\u0001\u0004\u0001\u001d\u0003\u0004\u0003\u001d\u0003\u0004\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0002\u0004\u0001\u001d\t\u0004\u0001\u001d\u0002\u0004\u0001E\u0005\u0004\u0001\u001d\u0002\u0000\u0001\u001d\u0001\u0004\u0001\u001d\u0003\u0004\u0003\u001d\u0003\u0004\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0002\u0004\u0001\u001d\u0005\u0004\u0001F\u0003\u0004\u0001\u001d\u0001\u0004\u0001G\u0001\u0004\u0001\u001f\u0004\u0004\u0001\u001d\u0002\u0000\u0001\u001d\u0001\u0004\u0001\u001d\u0003\u0004\u0003\u001d\u0003\u0004\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0002\u0004\u0001\u001d\u0003\u0004\u0001H\u0005\u0004\u0001\u001d\b\u0004\u0001\u001d\u0002\u0000\u0001\u001d\u0001\u0004\u0001\u001d\u0003\u0004\u0003\u001d\u0003\u0004\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0002\u0004\u0001\u001d\t\u0004\u0001I\u0001J\u0007\u0004\u0001\u001d\u0002\u0000\u0001\u001d\u0001\u0004\u0001\u001d\u0003\u0004\u0003\u001d\u0003\u0004\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0002\u0004\u0001\u001d\t\u0004\u0001\u001d\u0003\u0004\u0001K\u0001L\u0003\u0004\u0001\u001d\u0002\u0000\u0001\u001d\u0001\u0004\u0001\u001d\u0003\u0004\u0003\u001d\u0003\u0004\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0001M\u0001\u0004\u0001\u001d\t\u0004\u0001\u001d\b\u0004\u0001\u001d\u0002\u0000\u0001\u001d\u0001\u0004\u0001\u001d\u0003\u0004\u0003\u001d\u0003\u0004\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0002\u0004\u0001N\u0001O\u0003\u0004\u0001P\u0004\u0004\u0001\u001d\b\u0004\u0001\u001d\u0003\u0000\u0001\u001c\u0001\u0000\u0003\u001c\u0003\u0000\u0003\u001c\t\u0000\u0002\u001c\u0001\u0000\t\u001c\u0001\u0000\b\u001c\u0003\u0000\r\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0016\u001d\u0002\u0000\r\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0001Q\u0015\u001d\u0002\u0000\u0001\u001d\u0001\u0004\u0001\u001d\u0003\u0004\u0003\u001d\u0003\u0004\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0001'\u0001\u0004\u0001\u001d\t\u0004\u0001\u001d\b\u0004\u0001\u001d\u0002\u0000\u0001\u001d\u0001\u0004\u0001\u001d\u0003\u0004\u0003\u001d\u0003\u0004\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0001'\u0001\u0004\u0001\u001d\u0003\u0004\u0001'\u0003\u0004\u0001'\u0001\u0004\u0001\u001d\b\u0004\u0001\u001d\u0002\u0000\u0001\u001d\u0001\u0004\u0001\u001d\u0003\u0004\u0003\u001d\u0003\u0004\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0002\u0004\u0001\u001d\u0007\u0004\u0001'\u0001\u0004\u0001\u001d\b\u0004\u0001\u001d\n\u0000\u0001R,\u0000\u0001S$\u0000\u0004\u001d\u0001T\u0004\u001d\u0001T\u0003\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0016\u001d\u0002\u0000\u0002\u001d\u0004U\u0003\u001d\u0002U\u0002\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0001\u001d\u0001U\u0004\u001d\u0002U\u0002\u001d\u0002U\n\u001d\u0002\u0000\u0001\u001d\u0001\u0004\u0001\u001d\u0003\u0004\u0003\u001d\u0003\u0004\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0002\u0004\u0001\u001d\u0002\u0004\u0001V\u0006\u0004\u0001\u001d\b\u0004\u0001\u001d\u0002\u0000\u0001\u001d\u0001\u0004\u0001\u001d\u0001&\u0002\u0004\u0003\u001d\u0003\u0004\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0002\u0004\u0001(\u0001)\u0001&\u0001W\u0001+\u0001,\u0004\u0004\u0001\u001d\u0001\u0004\u0001/\u00010\u0001\u0004\u0001+\u00011\u00012\u0001\u0004\u0001\u001d\u0002\u0000\u0003\u001d\u0001X\t\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0004\u001d\u0001X\u0001Y\u0001Z\u0001[\u0006\u001d\u0001\\\u0001]\u0001\u001d\u0001Z\u0001^\u0001_\u0002\u001d\u0002\u0000\u0001\u001d\u0001\u0004\u0001\u001d\u0001&\u0002\u0004\u0003\u001d\u0003\u0004\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0002\u0004\u0001\u001d\u0001\u0004\u0001&\u0001W\u0001+\u0001,\u0004\u0004\u0001\u001d\u0001\u0004\u0001/\u00010\u0001\u0004\u0001+\u00011\u00012\u0001\u0004\u0001\u001d\u0002\u0000\u0001\u001d\u0001\u0004\u0001\u001d\u0001&\u0002\u0004\u0003\u001d\u0003\u0004\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0002\u0004\u0001(\u0001)\u0001&\u0001W\u0001+\u0001`\u0004\u0004\u0001\u001d\u0001\u0004\u0001/\u00010\u0001V\u0001+\u00011\u00012\u0001V\u0001\u001d\u0002\u0000\u0001\u001d\u0001\u0004\u0001\u001d\u0003\u0004\u0003\u001d\u0003\u0004\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0002\u0004\u0001a\u0001V\u0002\u0004\u0001V\u0005\u0004\u0001\u001d\b\u0004\u0001\u001d\u0002\u0000\u0001\u001d\u0001\u0004\u0001\u001d\u0003\u0004\u0003\u001d\u0003\u0004\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0002\u0004\u0001\u001d\u0005\u0004\u0001V\u0003\u0004\u0001\u001d\b\u0004\u0001\u001d\u0002\u0000\r\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0006\u001d\u0001Q\u000f\u001d\u0002\u0000\u0001\u001d\u0001\u0004\u0001\u001d\u0003\u0004\u0003\u001d\u0003\u0004\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0002\u0004\u0001\u001d\u0003\u0004\u0001'\u0005\u0004\u0001\u001d\b\u0004\u0001\u001d\u0002\u0000\u0001\u001d\u0001\u0004\u0001\u001d\u0003\u0004\u0003\u001d\u0003\u0004\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0002\u0004\u0001\u001d\u0004\u0004\u0001V\u0004\u0004\u0001\u001d\b\u0004\u0001\u001d\u0002\u0000\u0001\u001d\u0001\u0004\u0001\u001d\u0003\u0004\u0003\u001d\u0003\u0004\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0002\u0004\u0001\u001d\t\u0004\u0001a\u0001V\u0007\u0004\u0001\u001d\u0002\u0000\u0001\u001d\u0001\u0004\u0001\u001d\u0003\u0004\u0003\u001d\u0003\u0004\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0002\u0004\u0001a\u0001V\b\u0004\u0001a\u0001V\u0007\u0004\u0001\u001d\u0002\u0000\u0001\u001d\u0001\u0004\u0001\u001d\u0003\u0004\u0003\u001d\u0003\u0004\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0002\u0004\u0001\u001d\u0004\u0004\u0001V\u0004\u0004\u0001\u001d\u0007\u0004\u0001V\u0001\u001d\u0006\u0000\u0001b\u0001>\u0003\u0000\u0001>\f\u0000\u0001>/\u0000\u0001>.\u0000\u0001>&\u0000\u0001>\u0017\u0000\u0001\u001d\u0001\u0004\u0001\u001d\u0001\u0004\u00019\u0001\u0004\u0003\u001d\u00019\u0002\u0004\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0001\u0004\u00019\u0001\u001d\t\u0004\u0001\u001d\b\u0004\u0001\u001d\u0002\u0000\u0001\u001d\u0001\u0004\u0001\u001d\u0003\u0004\u0003\u001d\u0002\u0004\u0001'\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0002\u0004\u0001\u001d\t\u0004\u0001\u001d\b\u0004\u0001\u001d\u0002\u0000\n\u001d\u0001Q\u0002\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0006\u001d\u0001Q\u000f\u001d\u0002\u0000\u0001\u001d\u0001\u0004\u0001\u001d\u0003\u0004\u0003\u001d\u0001\u0004\u0001'\u0001\u0004\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0002\u0004\u0001\u001d\u0003\u0004\u0001'\u0005\u0004\u0001\u001d\b\u0004\u0001\u001d\u001d\u0000\u0001c\u001b\u0000\u0001c7\u0000\u0001d\u000e\u0000\u0001e\b\u0000\u0001\u001d\u0001\u0004\u0001\u001d\u0003\u0004\u0003\u001d\u0001\u0004\u0001'\u0001\u0004\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0002\u0004\u0001\u001d\t\u0004\u0001\u001d\b\u0004\u0001\u001d\u0002\u0000\u0001\u001d\u0001\u0004\u0001\u001d\u0003\u0004\u0003\u001d\u0003\u0004\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0001f\u0001\u0004\u0001\u001d\t\u0004\u0001\u001d\u0002\u0004\u0001g\u0005\u0004\u0001\u001d\u0002\u0000\r\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0001Q\u0004\u001d\u0001Q\u0010\u001d\u0002\u0000\u0001\u001d\u0001\u0004\u0001\u001d\u0003\u0004\u0003\u001d\u0003\u0004\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0001'\u0001\u0004\u0001\u001d\u0002\u0004\u0001'\u0006\u0004\u0001\u001d\b\u0004\u0001\u001d\u0002\u0000\u0001\u001d\u0001\u0004\u0001\u001d\u0003\u0004\u0003\u001d\u0003\u0004\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0002\u0004\u0001\u001d\u0001\u0004\u0001)\u0007\u0004\u0001\u001d\u0001\u0004\u0001)\u0006\u0004\u0001\u001d\u0002\u0000\u0001\u001d\u0001\u0004\u0001\u001d\u0003\u0004\u0003\u001d\u0003\u0004\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0002\u0004\u0001\u001d\u0006\u0004\u0001h\u0002\u0004\u0001\u001d\b\u0004\u0001\u001d\u0002\u0000\u0001\u001d\u0001\u0004\u0001\u001d\u0003\u0004\u0003\u001d\u0003\u0004\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0002\u0004\u0001\u001d\u0007\u0004\u0001V\u0001\u0004\u0001\u001d\b\u0004\u0001\u001d\u0002\u0000\u0001\u001d\u0001\u0004\u0001\u001d\u0003\u0004\u0003\u001d\u0001\u0004\u0001h\u0001\u0004\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0002\u0004\u0001\u001d\u0007\u0004\u0001h\u0001\u0004\u0001\u001d\b\u0004\u0001\u001d\u0002\u0000\r\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0005\u001d\u0001i\u0010\u001d\u0002\u0000\u0001\u001d\u0001\u0004\u0001\u001d\u0003\u0004\u0003\u001d\u0003\u0004\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0002\u0004\u0001\u001d\u0002\u0004\u0001j\u0006\u0004\u0001\u001d\b\u0004\u0001\u001d\u0002\u0000\u0001\u001d\u0001\u0004\u0001\u001d\u0003\u0004\u0003\u001d\u0003\u0004\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0002\u0004\u0001\u001d\t\u0004\u0001\u001d\u0004\u0004\u0001'\u0003\u0004\u0001\u001d\u0002\u0000\u0001\u001d\u0001\u0004\u0001\u001d\u0003\u0004\u0003\u001d\u0003\u0004\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0002\u0004\u0001\u001d\t\u0004\u0001\u001d\u0001\u0004\u0001'\u0006\u0004\u0001\u001d\u0002\u0000\u0001\u001d\u0001\u0004\u0001\u001d\u0003\u0004\u0003\u001d\u0003\u0004\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0001'\u0001\u0004\u0001\u001d\t\u0004\u0001\u001d\u0001\u0004\u0001'\u0006\u0004\u0001\u001d\u0002\u0000\r\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0014\u001d\u0001(\u0001\u001d\u0002\u0000\u0001\u001d\u0001\u0004\u0001\u001d\u0003\u0004\u0003\u001d\u0003\u0004\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0002\u0004\u0001\u001d\t\u0004\u0001\u001d\u0007\u0004\u0001)\u0001\u001d\u0002\u0000\u0001\u001d\u0001\u0004\u0001\u001d\u0003\u0004\u0003\u001d\u0003\u0004\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0002\u0004\u0001\u001d\u0005\u0004\u0001)\u0003\u0004\u0001\u001d\b\u0004\u0001\u001d\u0002\u0000\u0003\u001d\u0001X\t\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0002\u001d\u0002(\u0001X\u0001Y\u0001Z\u0001[\u0006\u001d\u0001\\\u0001]\u0001\u001d\u0001Z\u0001^\u0001_\u0002\u001d\u0002\u0000\u0001\u001d\u0001\u0004\u0001\u001d\u0003\u0004\u0003\u001d\u0003\u0004\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0002\u0004\u0001a\u0001V\u0003\u0004\u0001V\u0004\u0004\u0001\u001d\u0003\u0004\u0001V\u0003\u0004\u0001V\u0001\u001d\u0002\u0000\r\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0005\u001d\u0001a\u0010\u001d\u0002\u0000\r\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0002\u001d\u0002a\u0003\u001d\u0001a\b\u001d\u0001a\u0003\u001d\u0001a\u0001\u001d\u0002\u0000\r\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0002\u001d\u0002a\u0002\u001d\u0001a\u000f\u001d\u0002\u0000\r\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\b\u001d\u0001a\r\u001d\u0002\u0000\r\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0007\u001d\u0001a\u000e\u001d\u0002\u0000\r\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\f\u001d\u0002a\b\u001d\u0002\u0000\r\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0002\u001d\u0002a\b\u001d\u0002a\b\u001d\u0002\u0000\r\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0007\u001d\u0001a\f\u001d\u0001a\u0001\u001d\u0006\u0000\u0001>\u0004\u0000\u0001>\f\u0000\u0001>\u0019\u0000\u0001k\u0013\u0000\u0002l\u0001k\u0001m\u0001n\u0001o\u0006\u0000\u0001p\u0001q\u0001\u0000\u0001n\u0001r\u0001s\u0007\u0000\u0001k\u0006\u0000\u0001l\u000e\u0000\u0001k\u0001m\u0001n\u0001o\u0006\u0000\u0001p\u0001q\u0001\u0000\u0001n\u0001r\u0001s \u0000\u0001t\u0002\u0000\u0001u\u0001t\u0002u\n\u0000\u0001\u001d\u0001\u0004\u0001\u001d\u0001&\u0002\u0004\u0003\u001d\u0001\u0004\u0001)\u0001\u0004\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0002\u0004\u0001\u001d\u0001\u0004\u0001&\u0001W\u0001+\u0001,\u0004\u0004\u0001\u001d\u0001\u0004\u0001/\u00010\u0001\u0004\u0001+\u00011\u00012\u0001\u0004\u0001\u001d\u0002\u0000\u0001\u001d\u0001\u0004\u0001\u001d\u0003\u0004\u0003\u001d\u0003\u0004\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0002\u0004\u0001\u001d\u0004\u0004\u0001v\u0002\u0004\u0001w\u0001v\u0001x\u0001w\u0007\u0004\u0001\u001d\u0002\u0000\r\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0005\u001d\u0001y\u0010\u001d\u0002\u0000\u0001\u001d\u0001\u0004\u0001\u001d\u0003\u0004\u0003\u001d\u0003\u0004\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0002\u0004\u0001\u001d\u0002\u0004\u0001h\u0006\u0004\u0001\u001d\b\u0004\u0001\u001d\u001c\u0000\u0001z\u0015\u0000\u0001k\u0015\u0000\u0001k\u0001m\u0001n\u0001o\u0006\u0000\u0001p\u0001q\u0001\u0000\u0001n\u0001r\u0001s\u001b\u0000\u0002z\u0003\u0000\u0001z\b\u0000\u0001z\u0003\u0000\u0001z\u001a\u0000\u0002z\u0002\u0000\u0001z.\u0000\u0001z+\u0000\u0001z1\u0000\u0002z!\u0000\u0002z\b\u0000\u0002z&\u0000\u0001z\f\u0000\u0001z\u0006\u0000\u0001l\u001b\u0000\u0001l\u0010\u0000\u0001l\u0006\u0000\u0001l\"\u0000\u0001\u001d\u0001\u0004\u0001\u001d\u0001)\u0002\u0004\u0003\u001d\u0003\u0004\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0002\u0004\u0001\u001d\u0007\u0004\u0001)\u0001\u0004\u0001\u001d\b\u0004\u0001\u001d\u0002\u0000\u0001\u001d\u0001\u0004\u0001\u001d\u0001)\u0002\u0004\u0003\u001d\u0001\u0004\u0001)\u0001\u0004\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0002\u0004\u0001\u001d\t\u0004\u0001\u001d\b\u0004\u0001\u001d\u0002\u0000\u0003\u001d\u0001(\u0006\u001d\u0001(\u0002\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0001\u001d\u0002\u0000\u0016\u001d\u0002\u0000";
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;
    private static final String[] ZZ_ERROR_MSG = new String[]{"Unkown internal scanner error", "Error: could not match input", "Error: pushback value was too large"};
    private static final int[] ZZ_ATTRIBUTE = ArmV7TokenMaker.zzUnpackAttribute();
    private static final String ZZ_ATTRIBUTE_PACKED_0 = "\u0002\u0000\u0001\t\t\u0001\u0002\t\u0013\u0001\u0002\u0000\u0010\u0001\u0004\u0000\u0005\u0001\u0001\u0000\u0001\t\u0002\u0000\u0011\u0001\u0001\t\u0012\u0001\u0001\u0000\u0005\u0001\u0001\u0000\u0001\u0001\t\u0000\u0004\u0001\u0001\t";
    /** Input device. */
    private java.io.Reader zzReader;

    /** Current state of the DFA. */
    private int zzState;

    /** Current lexical state. */
    private int zzLexicalState = YYINITIAL;

    /**
     * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
     * string.
     */
    private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

    /** Text position at the last accepting state. */
    private int zzMarkedPos;

    /** Current text position in the buffer. */
    private int zzCurrentPos;

    /** Marks the beginning of the {@link #yytext()} string in the buffer. */
    private int zzStartRead;

    /** Marks the last character in the buffer, that has been read from input. */
    private int zzEndRead;

    /**
     * Whether the scanner is at the end of file.
     */
    private boolean zzAtEOF;

    /** Number of characters from the last newline up to the start of the matched text. */
    @SuppressWarnings("unused")
    private int yycolumn;

    /** Number of characters up to the start of the matched text. */
    @SuppressWarnings("unused")
    private long yychar;

    /** Whether the scanner is currently at the beginning of a line. */
    @SuppressWarnings("unused")
    private boolean zzAtBOL = true;

    /** Whether the user-EOF-code has already been executed. */
    @SuppressWarnings("unused")
    private boolean zzEOFDone;
    /**
     * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
     *
     * <p>When a lead/high surrogate has been read from the input stream into the final
     * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
     */
    private int zzFinalHighSurrogate = 0;

    private static int[] zzUnpackAction() {
        int[] result = new int[122];
        int offset = 0;
        offset = ArmV7TokenMaker.zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;
        int j = offset;
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do {
                result[j++] = value;
            } while (--count > 0);
        }
        return j;
    }

    private static int[] zzUnpackRowMap() {
        int[] result = new int[122];
        int offset = 0;
        offset = ArmV7TokenMaker.zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;
        int j = offset;
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    private static int[] zzUnpackTrans() {
        int[] result = new int[4815];
        int offset = 0;
        offset = ArmV7TokenMaker.zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    private static int[] zzUnpackAttribute() {
        int[] result = new int[122];
        int offset = 0;
        offset = ArmV7TokenMaker.zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    public ArmV7TokenMaker() {
    }

    private int zzMaxBufferLen() {
        return Integer.MAX_VALUE;
    }

    private void addToken(int tokenType) {
        this.addToken(this.zzStartRead, this.zzMarkedPos - 1, tokenType);
    }

    private void addToken(int start, int end, int tokenType) {
        int so = start + this.offsetShift;
        this.addToken(this.zzBuffer, start, end, tokenType, so);
    }

    @Override
    public void addToken(char[] array, int start, int end, int tokenType, int startOffset) {
        super.addToken(array, start, end, tokenType, startOffset);
        this.zzStartRead = this.zzMarkedPos;
    }

    @Override
    public String[] getLineCommentStartAndEnd(int languageIndex) {
        return new String[]{";", null};
    }

    @Override
    public Token getTokenList(Segment text, int initialTokenType, int startOffset) {
        resetTokenList();
        this.offsetShift = -text.offset + startOffset;
        int state = 0;
        switch (initialTokenType) {

        }
        state = 0;
        this.s = text;
        try {
            yyreset(this.zzReader);
            yybegin(state);
            return yylex();
        } catch (IOException ioe) {
            ioe.printStackTrace();
            return new TokenImpl();
        }
    }

    private boolean zzRefill() throws IOException {
        return this.zzCurrentPos >= this.s.offset + this.s.count;
    }

    public final void yyreset(Reader reader) throws IOException {
        this.zzBuffer = this.s.array;
        this.zzStartRead = this.s.offset;
        this.zzEndRead = this.zzStartRead + this.s.count - 1;
        this.zzCurrentPos = this.zzMarkedPos = this.s.offset;
        this.zzLexicalState = 0;
        this.zzReader = reader;
        this.zzAtBOL = true;
        this.zzAtEOF = false;
    }

    public ArmV7TokenMaker(Reader in) {
        this.zzReader = in;
    }

    private static char[] zzUnpackCMap(String packed) {
        char[] map = new char[0x110000];
        int i = 0;
        int j = 0;
        while (i < 240) {
            int count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do {
                map[j++] = value;
            } while (--count > 0);
        }
        return map;
    }

    public final void yyclose() throws IOException {
        this.zzAtEOF = true;
        this.zzEndRead = this.zzStartRead;
        if (this.zzReader != null) {
            this.zzReader.close();
        }
    }

    public final int yystate() {
        return this.zzLexicalState;
    }

    @Override
    public final void yybegin(int newState) {
        this.zzLexicalState = newState;
    }

    public final String yytext() {
        return new String(this.zzBuffer, this.zzStartRead, this.zzMarkedPos - this.zzStartRead);
    }

    public final char yycharat(int pos) {
        return this.zzBuffer[this.zzStartRead + pos];
    }

    public final int yylength() {
        return this.zzMarkedPos - this.zzStartRead;
    }

    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        }
        catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[0];
        }
        throw new Error(message);
    }

    public void yypushback(int number) {
        if (number > this.yylength()) {
            this.zzScanError(2);
        }
        this.zzMarkedPos -= number;
    }

    public Token yylex() throws IOException {
        int zzEndReadL = this.zzEndRead;
        char[] zzBufferL = this.zzBuffer;
        char[] zzCMapL = ZZ_CMAP;
        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;
        block26: while (true) {
            int zzInput;
            int zzMarkedPosL = this.zzMarkedPos;
            int zzAction = -1;
            this.zzCurrentPos = this.zzStartRead = zzMarkedPosL;
            int zzCurrentPosL = this.zzStartRead;
            this.zzState = this.zzLexicalState;
            while (true) {
                if (zzCurrentPosL < zzEndReadL) {
                    zzInput = zzBufferL[zzCurrentPosL++];
                } else {
                    if (this.zzAtEOF) {
                        zzInput = -1;
                        break;
                    }
                    this.zzCurrentPos = zzCurrentPosL;
                    this.zzMarkedPos = zzMarkedPosL;
                    boolean eof = this.zzRefill();
                    zzCurrentPosL = this.zzCurrentPos;
                    zzMarkedPosL = this.zzMarkedPos;
                    zzBufferL = this.zzBuffer;
                    zzEndReadL = this.zzEndRead;
                    if (eof) {
                        zzInput = -1;
                        break;
                    }
                    zzInput = zzBufferL[zzCurrentPosL++];
                }
                int zzNext = zzTransL[zzRowMapL[this.zzState] + zzCMapL[zzInput]];
                if (zzNext == -1) break;
                this.zzState = zzNext;
                int zzAttributes = zzAttrL[this.zzState];
                if ((zzAttributes & 1) != 1) continue;
                zzAction = this.zzState;
                zzMarkedPosL = zzCurrentPosL;
                if ((zzAttributes & 8) == 8) break;
            }
            this.zzMarkedPos = zzMarkedPosL;
            switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                case 1: {
                    this.addToken(20);
                }
                case 11: {
                    continue block26;
                }
                case 2: {
                    this.addToken(24);
                }
                case 12: {
                    continue block26;
                }
                case 3: {
                    this.addToken(10);
                }
                case 13: {
                    continue block26;
                }
                case 4: {
                    this.addToken(6);
                }
                case 14: {
                    continue block26;
                }
                case 5: {
                    this.addToken(21);
                }
                case 15: {
                    continue block26;
                }
                case 6: {
                    this.addToken(1);
                    this.addNullToken();
                    return this.firstToken;
                }
                case 16: {
                    continue block26;
                }
                case 7: {
                    this.addNullToken();
                    return this.firstToken;
                }
                case 17: {
                    continue block26;
                }
                case 8: {
                    this.addToken(23);
                }
                case 18: {
                    continue block26;
                }
                case 9: {
                    this.addToken(8);
                }
                case 19: {
                    continue block26;
                }
                case 10: {
                    this.addToken(17);
                }
                case 20: {
                    continue block26;
                }
            }
            if (zzInput == -1 && this.zzStartRead == this.zzCurrentPos) {
                this.zzAtEOF = true;
                switch (this.zzLexicalState) {
                    case 0: {
                        this.addNullToken();
                        return this.firstToken;
                    }
                    case 123: {
                        continue block26;
                    }
                }
                return null;
            }
            this.zzScanError(1);
        }
    }
}

